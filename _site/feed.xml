<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-04T19:25:30+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ramya Bygari</title><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><entry><title type="html">Taking a Stand</title><link href="http://localhost:4000/post/2020/11/04/taking-a-stand.html" rel="alternate" type="text/html" title="Taking a Stand" /><published>2020-11-04T00:00:00+05:30</published><updated>2020-11-04T00:00:00+05:30</updated><id>http://localhost:4000/post/2020/11/04/taking-a-stand</id><content type="html" xml:base="http://localhost:4000/post/2020/11/04/taking-a-stand.html">&lt;p&gt;This election cycle has made me see how tribalistic I can be in my perception of
politics. It’s very easy for me to fall into a point of view in which there is a “good
team” and a “bad team.” This perspective is harmful in that it causes other painful
emotions to arise (e.g. anger), but also in that it prevents me from contributing
meaningfully to the political discourse and being a citizen that contributes to our
country’s progress.&lt;/p&gt;

&lt;p&gt;For me, the way to alleviate these tribalistic ideas is to replace them with a
meaningful and well-articulated set of ideas and opinions. I think it’s time for me to
put myself out there as a person with opinions and ideas on how to improve our country.&lt;/p&gt;

&lt;p&gt;So, I’m going to outline my ideas in this post. These views will certainly change over
time, and I hope to become better informed on all of them. That said, I think the
foundational idea of democracy is that aggregating the opinions of many
only-partly-informed citizens is better than only considering the opinions of an
extremely-well-informed elite. So, in that spirit, I will endeavor to articulate my
only-partly-informed viewpoint.&lt;/p&gt;

&lt;p&gt;Below, I will state my opinions as fact. I think it makes for a better articulation than
if I’m couching each sentence with “in my opinion…” and “as far as I can see…”, but
the reader should be aware that this is implied; I’m far from an expert in most of these
issues, and I am not citing most of my claims. If you think I’m wrong, then I probably
am; please let me know in the comments, preferably with some reference to back up your
correction. I’ll happily modify this post as I update my understanding.&lt;/p&gt;

&lt;h1 id=&quot;driving-values&quot;&gt;Driving Values&lt;/h1&gt;

&lt;p&gt;The various positions I take on issues below are all instrumental; that is, they aim to
be in service of certain core values that I hold. It’s important to lay these out before
discussing individual points, because they frame any discussions that will be had.&lt;/p&gt;

&lt;p&gt;I value &lt;strong&gt;mutual respect and kindness&lt;/strong&gt;. I think that society should be built on a
foundation of people respecting one another, and being kind to one another. This doesn’t
have to mean that we love one another or even particularly like one another; it just
means that we have to recognize other people as human beings, with wants, hopes, and
lives just as valid as our own.&lt;/p&gt;

&lt;p&gt;I care about &lt;strong&gt;liberty&lt;/strong&gt;. That is, I want people to have the freedom to do what they want to
do without unreasonable restriction. For example, what religion you practice, who you
choose to have sex with, and what drugs you choose to put in your body should not be
regulated by the government.&lt;sup id=&quot;fnref:fn1&quot;&gt;&lt;a href=&quot;#fn:fn1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I care about &lt;strong&gt;economic opportunity&lt;/strong&gt;. I want all people in our society to have access to
basic comforts, such as sufficient food, clothing, shelter, and medical care.&lt;/p&gt;

&lt;p&gt;I care about &lt;strong&gt;equality&lt;/strong&gt;. This goes hand in hand with both liberty and mutual respect. I
think that all people are fundamentally deserving of certain rights, irrespective of
gender, race, intelligence, etc.&lt;sup id=&quot;fnref:fn2&quot;&gt;&lt;a href=&quot;#fn:fn2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I care about &lt;strong&gt;security&lt;/strong&gt;. We should strive to provide a life without unnecessary physical
or psychological dangers.&lt;/p&gt;

&lt;h1 id=&quot;economic-issues&quot;&gt;Economic Issues&lt;/h1&gt;

&lt;p&gt;I think economic issues are fundamental. Many of the issues we face as a society are
symptoms of underlying economic issues. If the people in our society felt like
they have economic opportunity, and are confident that their children will have this
opportunity as well, then our society would function much more smoothly.&lt;/p&gt;

&lt;p&gt;For exmaple, it seems to me that our nations current drift towards partisan politics and
an anger-driven national discourse is driven by the lack of economic opportunity
available to much of the lower and middle class in American today. We can try and make
changes to the structure of government, or elect different leaders (both of which I
think are good ideas), but ultimately if we do not address the root (economic) causes of
people’s discontent, then we will never have a functioning governmental system.&lt;/p&gt;

&lt;h2 id=&quot;education&quot;&gt;Education&lt;/h2&gt;

&lt;p&gt;Education is a huge part of the economic life of an American. A college degree is seen
as crucial to economic success, and various studies have shown that having a bachelor’s
degree increases lifetime earnings, with some studies claiming to have established
causality in this relationship.&lt;sup id=&quot;fnref:fn3&quot;&gt;&lt;a href=&quot;#fn:fn3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;But, college is getting more and more expensive, and the marginal value of a college
degree is decreasing as more and more people get them. Now students graduate from
college with five- or six-figure debt, which prevents them from building wealth that can
provide economic security for them as they age and retire.&lt;/p&gt;

&lt;p&gt;Bernie Sanders famously campaigned on free college for all. I think &lt;strong&gt;free college is a
bad solution&lt;/strong&gt;. It would funnel large amounts of taxpayer money towards colleges that
charge too much and deliver too little in terms of valuable skills. We need to
transition our society away from its obsession with the four-year college degree, and
move towards a trade-school model like &lt;a href=&quot;https://www.bmbf.de/en/the-german-vocational-training-system-2129.html&quot;&gt;that implemented in Germany.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some argue that college is about more than just job training; it is about developing
critical thinking skills, and becoming a fully functional citizen. I agree that these
skills are fundamental to civic participation; I don’t see most colleges doing an
acceptable job of providing their students with them. For example, the state could run
free community-based classes that teach critical thinking - these would be independent
of whatever vocational training a person decides to undertake.&lt;/p&gt;

&lt;h2 id=&quot;taxation-spending--the-social-safety-net&quot;&gt;Taxation, Spending, &amp;amp; the Social Safety Net&lt;/h2&gt;

&lt;p&gt;A strong social safety net is an excellent way to prevent economic distress. This will
require more taxes, but this doesn’t need to be burdensome on the middle (or even
upper-middle) classes, if done correctly.&lt;sup id=&quot;fnref:fn4&quot;&gt;&lt;a href=&quot;#fn:fn4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This social safety net should include expansion of medicare and social
security/welfare. We should provide free childcare for young children, to allow mothers
to participate in the workforce unhindered. I would love to see universal basic income
implemented in an effective way; we would need to significantly increase taxes in order
to do so, however, and probably on more than just the very highest earners, so it’s not
obvious to me that it’s actually a good idea.&lt;/p&gt;

&lt;p&gt;To fund these endeavors, the government needs more revenue. We need to simplify the tax
code, and close loopholes. We need to increase taxes on the very highest earners and
corporations, and enforce the simplified tax code in order to ensure that those taxes
are actually paid. We should also significantly reduce defense spending to free up money
for domestic social spending.&lt;sup id=&quot;fnref:fn5&quot;&gt;&lt;a href=&quot;#fn:fn5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;regulation--deregulation&quot;&gt;Regulation &amp;amp; Deregulation&lt;/h2&gt;

&lt;p&gt;I think it is an essential role of govenment to regulate certian aspects of the
market. For example, there are shared goods that the market does not incentivize
individual actors to protect, but they are of high value to society as a
whole. Environmental protection regulation is an example of this; I think we need to
implement thorough and carefully thought-out environmental regulation, which expands on
our existing system.&lt;/p&gt;

&lt;p&gt;Another key area where the government needs to regulate is in antitrust. The government
should protect and promote a competitive marketplace. The current antitrust law, written
in the era of the railroad barons, is badly outdated and in need of an overhaul in order
to address potential anticompetitive behaviors of modern technology companies.&lt;/p&gt;

&lt;p&gt;Conversely, there are many places where the government heavily regulates that inhibit
economic activity and actually prevent the market from creating value. An example of
this is in urban land use; we need less regulation on building and zoning in urban areas
so that builders can generate a supply to meet the growing demand, and undercut the
exploding housing costs in many large American cities. Rent control is &lt;u&gt;not&lt;/u&gt; a good
solution for this; it’s simply a supply-and-demand problem, and we need to increase the
supply.&lt;/p&gt;

&lt;h2 id=&quot;health-care&quot;&gt;Health Care&lt;/h2&gt;

&lt;p&gt;Health care should be mentioned, as it related to regulation and deregulation, although
I don’t actually have a strong opinion on it. I have heard some solid arguments that the
tangled relationship between US health insurance companies and the health care sector is
a drive of our current explosion in health care costs, and that if we removed some of
the barries put in place then we could have a more efficient market for health care,
that would provide better value.&lt;/p&gt;

&lt;p&gt;However, we tend to be bad at even &lt;em&gt;thinking&lt;/em&gt; of health care as a good; for example, we
rarely do a cost-benefit consideration of chemotherapy for a loved one, we generally say
“do whatever it takes.” For health care to function as a market, we would need to start
considering seriously (for example) whether it’s worth $500,000 to extend the life of a
75-year-old by another 8 years.&lt;/p&gt;

&lt;p&gt;The opposite end of the spectrum is single-payer healthcare. This might actually be a
good way to get costs down because then the government, as the single customer of
health-care, would have a lot of bargaining power and be able to bring down the price
they pay for services provided. However, if they don’t do this effectively, then a &lt;u&gt;lot&lt;/u&gt;
of taxpayer money would be going to services that may not be worth it (unnecessary
procedures or imaging, for example).&lt;/p&gt;

&lt;h1 id=&quot;governance&quot;&gt;Governance&lt;/h1&gt;

&lt;p&gt;The US has a representative government, and we need to make sure that our elected
officials are incentivized to genuinely reflect the views, opinions, and values of the
population that they represent.&lt;/p&gt;

&lt;p&gt;I’m going to argue here for changes we should make to our existing system. I will try to
focus on changes that could be enacted legislatively, rather than by constiutional
amendment, because it’s very difficult to gather the consensus needed to enact the
latter, particularly in our current political environment.&lt;sup id=&quot;fnref:fn6&quot;&gt;&lt;a href=&quot;#fn:fn6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;campaign-finance-reform&quot;&gt;Campaign Finance Reform&lt;/h2&gt;

&lt;p&gt;One of the key things that incentivizes elected officials is campaign finance. They need
to please their campaign donors, so that they can raise money to support their
re-election, and election of their party members.&lt;/p&gt;

&lt;p&gt;We need to find a way to reduce the amount of money that flows through elections. It is
not always obvious how to make this happen, but one thing that seems clear is that we
should overturn &lt;a href=&quot;https://en.wikipedia.org/wiki/Citizens_United_v._FEC&quot;&gt;the Citizens United ruling&lt;/a&gt; that grants free-speech rights to
corporations, allowing for unchecked corporate political spending. One solution would be
to cap the political donations by individuals &amp;amp; corporations to any campaigns or
political action committees at a relatively small amount (say, $5,000).&lt;/p&gt;

&lt;p&gt;This, however, runs into free speech concerns that I’m not entirely settled on;
shouldn’t I be able to spend my money on television advertisements saying (within
reason) whatever I like? If I genuinely think that Michael Dukakis is a threat to
American democracy, shouldn’t I be able to freely promote that message?&lt;/p&gt;

&lt;p&gt;It’s not obvious how to handle this, but I think we need to grapple with it in order to
re-establish integrity for our elected officials.&lt;/p&gt;

&lt;h2 id=&quot;legislative-gridlock&quot;&gt;Legislative Gridlock&lt;/h2&gt;

&lt;p&gt;Legislative gridlock is a big challenge to progress. It &lt;em&gt;appears&lt;/em&gt; that it is more
significant now than it has been in the past, but I’m not certain of that. We have seen
evidence that congress is more polarized, and that there is a trend away from compromise
and towards parties voting as predictable blocks on legislation.&lt;sup id=&quot;fnref:fn7&quot;&gt;&lt;a href=&quot;#fn:fn7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This is something we need to address. There may be changes we can make to the
legislative process that encourage compromise, and that would be a positive
step. However, my belief is that this polarization and partisanship ultimately flows
from the people themselves. Politicians are afraid to compromise because they know that
if they work across the aisle, they will be demonized by their constituents and not
re-elected.&lt;/p&gt;

&lt;p&gt;One way to reduce polarization is to avoid focus on already-politicized issues. For
example, if Democrats were to relax their traditional position on gun control, then
perhaps they would have more leverage to push for liberal economic policies that would
benefit lower-income Americans. Although some of these policies have been politicized
(e.g. single-payer healthcare) some of them have not, and maintain a fairly bipartisan
support base (e.g. universal basic income).&lt;/p&gt;

&lt;p&gt;It’s worth noting that we can also sidestep an ineffective legislature by allowing the
private sector to address problems. This will work, sometimes; for example, SpaceX has a
promising new satellite internet technology (Starlink) that I hope will soon provide
broadband internet to any area with a clear view of the sky; this would work around our
nation’s embarassingly poor broadband infrastructure (and lack of any political will to
address it). Some problems, however, are not well-addressed by the private sector
(e.g. nature conservation, antitrust law) because market forces work against them.&lt;/p&gt;

&lt;h2 id=&quot;court-packing&quot;&gt;Court-Packing&lt;/h2&gt;

&lt;p&gt;If our legislative branch is not functioning, then the executive and judicial branches
are encouraged to pick up the slack. This has resulted in presidents from Obama onward
severly expanding executive power via executive order, and also a focus on the
appointment of politically-motivated judges as a partisan strategy.&lt;/p&gt;

&lt;p&gt;We need to change our system so that it is robust to a partisan judiciary; right now,
and for the foreseeable future, this is the reality of our situation. Assuming the
officials that are empowered to appoint judges are elected fairly,&lt;sup id=&quot;fnref:fn8&quot;&gt;&lt;a href=&quot;#fn:fn8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;
then our goal is to ensure that judges are appointed at a roughly consistent rate.&lt;/p&gt;

&lt;p&gt;There are a few strategies that would encourage this. One strategy is to have
term-limits in place, rather than the current lifetime appointments. Another is to
increase the size of important courts, most notably the supreme court, so that the churn
of judges happens at a more consistent rate.&lt;/p&gt;

&lt;p&gt;Finally, we cannot let the Senate control approval of appointments. The Senate gives
equal voice to &lt;u&gt;states&lt;/u&gt;, rather than equal voice to individuals. So, it will always be
biased towards the lower-population-density areas, and therefore not be representative
of the will of the people. Such an institution should not hold control over who gets
appointed to the judiciary, especially in our current era of increasing judicial power.&lt;/p&gt;

&lt;p&gt;One solution would be to lower the threshold for approval of judges; for example, only
require that 35% approval of judiciary appointments. This, however, has its own
downsides, since it would allow for appointment of even-more-partisan judges to the
bench. I don’t know a better solution right now, but I think that it is a problem we
need to address.&lt;/p&gt;

&lt;h2 id=&quot;gerrymandering&quot;&gt;Gerrymandering&lt;/h2&gt;

&lt;p&gt;Gerrymandering has long been a strategy used to bias legislative bodies. It is
problematic in that it can make that legislative body less representational of the
population, which undermines the fundamental dynamics of democracy that support fair
governance.&lt;/p&gt;

&lt;p&gt;In short, we cannot allow the drawing of district lines to be a process controlled by an
inherently partisan legislative body (the state legislatures, in the US). I suspect that
there exist processes that guarantee a fair drawing of district lines; we should codify
those processes into law. Again, this is not something we can leave up to partisan
elected officials; we need to restrict it via a process that disallows such partisan
strategies.&lt;/p&gt;

&lt;h1 id=&quot;social-issues&quot;&gt;Social Issues&lt;/h1&gt;

&lt;p&gt;Social issues are a primary focus of politics in the US, and (from what I can see) are a
major driver of the partisan polarization we see today. They are also touchy, which is
to say that expressing certain opinions on social issues can have severe repurcussions
for people in their personal and professional lives.&lt;/p&gt;

&lt;p&gt;Because of that, I am going to refrain from going into much detail on these issues. I am
happy to discuss them in private, but I simply don’t trust our current social climate to
handle reasonable, well-thought-out discussion on these issues in the public sphere.&lt;/p&gt;

&lt;p&gt;This has been true throughout, but it’s worth emphasizing here; these are &lt;em&gt;just my
opinions&lt;/em&gt;, and I would enjoy the opportunity to change them. If you diagree with me, I
hope you will engage with me so that we can understand one another better, and hopefully
teach eachother a thing or two. I certainly have a lot to learn on all these topics.&lt;/p&gt;

&lt;h2 id=&quot;race--policing&quot;&gt;Race &amp;amp; Policing&lt;/h2&gt;

&lt;p&gt;Racism is a significant issue in America. Slavery is a horrific part of our national
heritage,&lt;sup id=&quot;fnref:fn9&quot;&gt;&lt;a href=&quot;#fn:fn9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; and it reverberates throughout our culture today. We should
always work towards the goal of a society where opportunities (economic, social, etc.)
are not limited by skin color or heritage.&lt;/p&gt;

&lt;p&gt;There is a lot of focus lately on the interactions of policing and race. I do support a
restructuring of the America policing system; we give too much authority, and too little
oversight, to police officers. This level of authority and oversight is appropriate when
handling certain issues, but is entirely absurd when (for example) an officer is
handling a routine traffic stop.&lt;/p&gt;

&lt;p&gt;A key element of police reform should be a severe reduction in the kinds of situations
that armed police officers handle. Armed officers, like we currently have, generally
have good ability in self-defense and are trained in it, but have very little
social/interpersonal skill, as evidenced by their recent trend of poor decision making
and inability to defuse tense situations that lead to violence and death. Traffic stops,
domestic disputes, etc. should be handled by public servants that have the appropriate
social skills.&lt;/p&gt;

&lt;p&gt;That said, I’m not sure that policing is actually the most important driver of racism in
America. Improving economic opportunities for &lt;u&gt;all&lt;/u&gt; Americans will go a long way towards
providing opportunities for marginalized groups. Even so, there are attitudes in our
society that will not be addressed simply by economic changes. I don’t have a good
answer for that problem, but I do think it is a fundamental one we must tackle if we
wish to function in alignment with the ideal that “all people are created equal.”&lt;/p&gt;

&lt;h2 id=&quot;gun-control&quot;&gt;Gun Control&lt;/h2&gt;

&lt;p&gt;The other social issue I will mention is gun control. This is an issue that contributes
&lt;u&gt;strongly&lt;/u&gt; to polarization, and prevents liberals from making inroads into rural
communities. I think we should do everything we can to prevent people from having an
unreasonable ability to harm one another. That said, I don’t think gun control should be
a high priority.&lt;/p&gt;

&lt;p&gt;About 38,000 people have died so far in 2020 due to gun violence. How many of these
would have been prevented if we could outlaw tactical/assault weapons? Only 16,000 of
these weren’t suicides, which are generall not done with such weapons. I’d estimate that
outlawing tactical and assault weapons would save fewer than 5,000 lives per year, and I
would guess it would be &lt;u&gt;much&lt;/u&gt; fewer, perhaps a reduction of 1,000 lives per year. Compare
that to (for example) obesity, which kills about 300,000 people a year. Smoking kills
over 400,000 people a year.&lt;/p&gt;

&lt;p&gt;I think that liberals over-prioritize gun control in their agenda, and it hurts their
ability to enact other, much more important and impactful aspects of their
platform. Frankly, I wish they would give it a rest.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Again, these things I’ve been stating as fact are, actually, &lt;em&gt;just my opinions&lt;/em&gt;. I have
taken up this imperative structure to embody my belief that we can only act from our
current, limited point of view, and that I cannot let the incompleteness of my knowledge
prevent me from having positions and taking action on issues that I see in the world.&lt;/p&gt;

&lt;p&gt;The flipside of this is that we always have to be willing to listen, and learn, and
change our opinions. Perhaps (for example) gun violence &lt;u&gt;is&lt;/u&gt; one of the most important
social issues facing our society today. I would be interested to see arguments of this,
and I aspire to be open-minded to any arguments that go against my existing
opinions. The things that are inarguable are &lt;u&gt;values&lt;/u&gt;;&lt;sup id=&quot;fnref:fn10&quot;&gt;&lt;a href=&quot;#fn:fn10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; those are inherent in
us, and cannot be proven or disproven. As for &lt;u&gt;how&lt;/u&gt; we go about enacting those values,
well, that must always be flexible and open to change.&lt;/p&gt;

&lt;!----- Footnotes -----&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn1&quot;&gt;
      &lt;p&gt;Of course, there are limits; for example, I believe sex should be performed only with mutual consent, and young children should be prevented from using certain drugs. &lt;a href=&quot;#fnref:fn1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn2&quot;&gt;
      &lt;p&gt;This gets complicated, though; what about people in vegitative states? What about animals? I’m glossing over some nuance here. &lt;a href=&quot;#fnref:fn2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn3&quot;&gt;
      &lt;p&gt;I should look up citations for this. &lt;a href=&quot;#fnref:fn3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn4&quot;&gt;
      &lt;p&gt;This is an area where I am opining without concrete numbers to back it up. However, most tax analyses are done in a blatantly partisan way; it’s very difficult to find an analysis of taxation and spending that is does not have ulterior motives. That said, if you have any recommendations, I’d love to hear them. &lt;a href=&quot;#fnref:fn4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn5&quot;&gt;
      &lt;p&gt;Our national security moving forward does not depend on having better airplanes or tactical equipment; it depends on intelligence and information security (cybersecurity). I actually think we should invest &lt;u&gt;more&lt;/u&gt; heavily in intelligence and infosec. I wholeheartedly believe that we should support our troops; I think the best way to do so is to avoid needless conflict, and ensure that these troops have sufficient economic, social, and medical security when they arrive back home. &lt;a href=&quot;#fnref:fn5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn6&quot;&gt;
      &lt;p&gt;For example, I think that a two-party system does not necessarily encourage the best representation, but this is so baked in to how our voting systems work that I don’t really discuss it here. In that particular case, I also am not really confident that a many-party system (a la Israel) is actually more effective or representative. &lt;a href=&quot;#fnref:fn6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn7&quot;&gt;
      &lt;p&gt;Vox recently &lt;a href=&quot;https://www.vox.com/polyarchy/2018/5/31/17406590/local-national-political-institutions-polarization-federalism&quot;&gt;wrote an interesting article&lt;/a&gt; on how our polarization may result from the fact that our system was designed for local political institutions, but most people now focus primarily on national politics. &lt;a href=&quot;#fnref:fn7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn8&quot;&gt;
      &lt;p&gt;It is my opinion that this is &lt;u&gt;not&lt;/u&gt; currently the case, due to e.g. gerrymandering of congressional districts. &lt;a href=&quot;#fnref:fn8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn9&quot;&gt;
      &lt;p&gt;I would be remiss to not also mention the other horrifici aspect of our national heritage: the systematic extermination of the indigenous peoples that inhabited North America previous to the arrival of Europeans. For a heartbreaking account of this, I recommend &lt;a href=&quot;https://www.amazon.com/Bury-My-Heart-Wounded-Knee/dp/0099526409/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;amp;qid=&amp;amp;sr=&quot;&gt;Bury My Heart at Wonded Knee&lt;/a&gt; by Dee Alexander Brown. &lt;a href=&quot;#fnref:fn9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn10&quot;&gt;
      &lt;p&gt;Values can change, of course, but they are not subject to evidence in the same way that strategies are. I cannot prove to you that (for example) freedom is more important than security; it is simply an opinion that one holds. That said, if we spend time with one another, and maintain an open-minded attitude, then we tend to absorb one another’s values, which is a process that leads us towards a more harmonious society. &lt;a href=&quot;#fnref:fn10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author></entry><entry><title type="html">Blogging in Org Mode</title><link href="http://localhost:4000/post/2019/09/24/blogging-in-org.html" rel="alternate" type="text/html" title="Blogging in Org Mode" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/post/2019/09/24/blogging-in-org</id><content type="html" xml:base="http://localhost:4000/post/2019/09/24/blogging-in-org.html">&lt;p&gt;I recently transitioned from writing my posts directly in markdown to writing them in
&lt;a href=&quot;https://orgmode.org/&quot;&gt;org mode&lt;/a&gt;, a document authoring system built in GNU Emacs. I learned a lot in the
process, and also built a new org exporter in the process, &lt;a href=&quot;https://github.com/peterewills/ox-jekyll-lite&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt;.&lt;/a&gt;&lt;sup id=&quot;fnref:fn1&quot;&gt;&lt;a href=&quot;#fn:fn1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h1 id=&quot;org-mode-and-the-meaning-of-life&quot;&gt;Org Mode and the Meaning of Life&lt;/h1&gt;

&lt;h2 id=&quot;what-is-org-mode&quot;&gt;What is Org Mode?&lt;/h2&gt;

&lt;p&gt;Laozi said that the Tao that can be told is not the eternal Tao; I think we can safely
say the same of org mode. Org mode is many things to many people, but at it’s core it is
a tool for taking notes and organizing lists. Additional functionality allows for simple
text markup, links, inline images, rendered \(\LaTeX\) fragments, and so on. You can embed
and run code blocks within org files, using the powerful &lt;a href=&quot;https://orgmode.org/worg/org-contrib/babel/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org-babel&lt;/code&gt;&lt;/a&gt; package. Some
people have even &lt;a href=&quot;https://write.as/dani/writing-a-phd-thesis-with-org-mode&quot;&gt;written
their Ph.D. thesis in org mode&lt;/a&gt;. It’s an amazingly powerful tool, with a passionate
user base that is constantly expanding its capabilities.&lt;/p&gt;

&lt;h2 id=&quot;why-not-markdown&quot;&gt;Why Not Markdown?&lt;/h2&gt;

&lt;p&gt;I like to use org mode for my personal and professional note-taking because it has very
good folding features - you can hide all headings besides the one you’re focusing
on. You can even “narrow” your buffer, so that only the heading (“subtree”, in org-mode
parlance) that you’re working on is present at all.&lt;/p&gt;

&lt;p&gt;Org mode also has some nice visual features for writing, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rendering \(\LaTeX\) fragments inline&lt;/li&gt;
  &lt;li&gt;styling &lt;strong&gt;bold&lt;/strong&gt;, &lt;u&gt;underlined&lt;/u&gt;, and &lt;em&gt;italicized&lt;/em&gt; text properly&lt;/li&gt;
  &lt;li&gt;excellent automatic formatting of tables&lt;/li&gt;
  &lt;li&gt;code syntax highlighting in various languages&lt;/li&gt;
  &lt;li&gt;display of images inline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wrote in markdown (using &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-mode&lt;/code&gt; within emacs) for some time, but once I saw
what org mode had to offer, I realized that I needed to transfer my blogging over to
org. In particular, the Emacs mode &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-mode&lt;/code&gt; doesn’t have a lot of the features that
org mode does, such as inline rendering of math and images or well-built text folding. I
used org for notes, and I realized that it would be much easier to just write in org
instead of trying to get markdown mode to work the way I want it to.&lt;/p&gt;

&lt;p&gt;Below is a short clip that shows just some of what org mode has to offer. You’ll
want to full-screen it to make the text legible.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/MV9LR2LCxAE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Overall, I find the experience of writing in org much more enjoyable than writing in
markdown. Plus, I love hacking on emacs, and moving my blogging workflow over to org
presented me with an opportunity to do just that! So of course, I couldn’t resist.&lt;/p&gt;

&lt;h1 id=&quot;org-export-and-jekyll&quot;&gt;Org-Export and Jekyll&lt;/h1&gt;

&lt;h2 id=&quot;blogging-in-jekyll&quot;&gt;Blogging in Jekyll&lt;/h2&gt;

&lt;p&gt;The primary tool I use to generate my blog is a static-site generator called &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;,
which is written in Ruby. I wrote &lt;a href=&quot;/_posts/2017-12-29-website.md&quot;&gt;a previous post&lt;/a&gt; describing my process for setting up
my site. &lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt; is a similar tool written in Python, and &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; is a
static-site generator written in Go. We’ll talk a bit more about Hugo later.&lt;/p&gt;

&lt;p&gt;All of these tools allow the user to write content in simple markdown, with the site
generator doing most of the heavy lifting in generating a full static site behind the
scenes. In Jekyll, the user provided some basic configuration for each post, like a
title, date, and excerpt, and then the them determines the details on how the text is
rendered into fully styled HTML. I use the excellent &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal mistakes&lt;/a&gt; theme.&lt;/p&gt;

&lt;p&gt;Unfortunately, markdown is not a nicely unified language specification There are many
dialects of markdown, and each has subtle differences, so there is not, in general, one
markdown specification to rule them all. For example, so-called “GitHub-flavored
markdown”, which renders markdown from READMEs in GitHub repositories, has certian
quirks that are not shared by the markdown I write for this site. To further complicate
things, the static site generators often have their own quirks - Jekyll requires
particularly-formatted front-matter to specify the configuration for each post, which is
not part of the general markdown specification.&lt;/p&gt;

&lt;p&gt;All that is to say, it wasn’t a trivial task to find something that converted org to the
exact markdown that I need for my site. But before we jump into the details there, we
should talk a bit about org exporters in general.&lt;/p&gt;

&lt;h2 id=&quot;org-export&quot;&gt;Org-Export&lt;/h2&gt;

&lt;p&gt;Org mode comes packaged with many built-in “exporters”, which convert from the org
format to other text formats, including HTML, \(\LaTeX\), iCalendar, and more. It &lt;em&gt;does&lt;/em&gt;
come with a backend that converts org to markdown, which I hoped would be all that I
need to convert org to markdown.&lt;/p&gt;

&lt;p&gt;Unfortunately, the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-md&lt;/code&gt; exporter doesn’t work very well, for a few reasons. It
falls back on using pure HTML (for example, to generate footnotes) when there are
markdown-native ways of accomplishing the same thing. Also, some things don’t work at
all - for example, equation exporting won’t work, since markdown requires you to enclose
LaTeX with &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\\]&lt;/code&gt;, whereas HTML only requires a single slash.&lt;sup id=&quot;fnref:fn2&quot;&gt;&lt;a href=&quot;#fn:fn2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;A quick search will show that there are many tools built to address this problem. Org
exporter backends are designed to be easy to extend, and many users have extended the
markdown backend to work with specific static site generators. The most fully developed
of these is &lt;a href=&quot;https://ox-hugo.scripter.co/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-hugo&lt;/code&gt;&lt;/a&gt;, which is built to work with the site generator Hugo. This
package in particular would be a big source of the transcoding functions I would use,
but since it is built to be tightly integrated with Hugo, I couldn’t just use it out of
the box.&lt;/p&gt;

&lt;p&gt;Elsa Gonsiorowski developed a Jekyll-friendly org exporter, called &lt;a href=&quot;https://www.gonsie.com/blorg/ox-jekyll.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-md&lt;/code&gt;&lt;/a&gt;, which
provided the basis for what I would eventually build. She also wrote &lt;a href=&quot;https://www.gonsie.com/blorg/ox-jekyll.html&quot;&gt;a blog post&lt;/a&gt; about
it - if you’re interested in customizing org exported, I’d recommend giving it a read.&lt;/p&gt;

&lt;h2 id=&quot;building-ox-jekyll-lite&quot;&gt;Building &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There are some things that &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-md&lt;/code&gt; does very well, including generating the
Jekyll-specific YAML front matter. However, I found that it lacks a few key features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;handling footnotes in a markdown-native way&lt;/li&gt;
  &lt;li&gt;rendering MathJax delimiters with double slashes (to make them markdown-compatable)&lt;/li&gt;
  &lt;li&gt;exporting image links appropriately&lt;/li&gt;
  &lt;li&gt;export link paths relative to the Jekyll root directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since these were essential to my blogging workflow, I forked that project and began work
on my org exporter, &lt;a href=&quot;https://github.com/peterewills/ox-jekyll-lite&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;customizing-an-org-export-backend&quot;&gt;Customizing an Org Export Backend&lt;/h3&gt;

&lt;p&gt;You can think of an org-export backend as a collection of rules for transforming org
files into other text format. For example, how should underlined text be handled? How
about code blocks? How about \(\LaTeX\) snippets? Each of these rules is encapsulated by a
so-called “transcoding function.”&lt;/p&gt;

&lt;p&gt;Org export backends are built to be highly extensible. If you extend &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-md&lt;/code&gt;, for example,
then you “inherit” all the transcoding functions that it provides, and you can add or replace
only the functions you want to. For example, part of &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt; looks like&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-export-define-derived-backend&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'jekyll&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'md&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:translate-alist&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-jekyll-lite-headline-offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inner-template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-jekyll-lite-inner-template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells us that we’re defining a backend named &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;, which derives from the backend
named &lt;code class=&quot;highlighter-rouge&quot;&gt;md&lt;/code&gt; (which, if you look, itself derives from the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; backend).&lt;/p&gt;

&lt;p&gt;In the code above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;translate-alist&lt;/code&gt; indicates that this backend handles &lt;code class=&quot;highlighter-rouge&quot;&gt;headline&lt;/code&gt;
objects via the &lt;code class=&quot;highlighter-rouge&quot;&gt;org-jekyll-lite-headline-offset&lt;/code&gt; method, and handles the &lt;code class=&quot;highlighter-rouge&quot;&gt;inner-template&lt;/code&gt;
object via &lt;code class=&quot;highlighter-rouge&quot;&gt;org-jekyll-lite-inner-template&lt;/code&gt;. These functions take in org elements,
returning text that will get dumped into the export buffer.&lt;/p&gt;

&lt;p&gt;The transcoding function &lt;code class=&quot;highlighter-rouge&quot;&gt;org-jekyll-lite-underline&lt;/code&gt; is a particularly simple example:&lt;/p&gt;

&lt;div class=&quot;language-elisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-jekyll-lite-underline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;underline&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;Transcode UNDERLINE from Org to Markdown.
CONTENTS is the text with underline markup.  INFO is a plist
holding contextual information.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;u&amp;gt;%s&amp;lt;/u&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Extending a backend consists of figuring out which elements you want to handle via
special logic, then writing the appropriate transcoding functions for each.&lt;/p&gt;

&lt;h3 id=&quot;implementation-details-for-ox-jekyll-lite&quot;&gt;Implementation Details for &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Most of the more complicated transcoding functions in &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt; are not written by
me. They either come from &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-md&lt;/code&gt;, or from &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-hugo&lt;/code&gt;. For example, I got the
transcoder for footnotes, and for \(\LaTeX\) snippets, from &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-hugo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting addition that I made was to render file links relative to the root
directory of Jekyll, when possible. For example, if you have an image in your
&lt;code class=&quot;highlighter-rouge&quot;&gt;assets/images&lt;/code&gt; folder, Jekyll wants you to link to it as &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/images/kitties.jpg&lt;/code&gt;, not
with the full path relative to the root directory of your computer’s filesystem.&lt;/p&gt;

&lt;p&gt;However, when I use &lt;code class=&quot;highlighter-rouge&quot;&gt;C-c C-l&lt;/code&gt; (along with Helm) to add a link to an org file, it renders
the link with the absolute path.&lt;sup id=&quot;fnref:fn3&quot;&gt;&lt;a href=&quot;#fn:fn3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; It’s important that the link is “correct” for my
machine, so that any images can render inline, and the links are clickable by me when
from my orgfile. But if the links are relative to my filesystem’s root in the markdown,
then they won’t work within the context of my site. So, we need to “fix” the links as we
export the post to markdown.&lt;/p&gt;

&lt;p&gt;I don’t get too complicated here - I just have the user specify a custom variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;org-jekyll-project-root&lt;/code&gt;, which then gets pulled off of the beginning of file paths when
it is present.&lt;/p&gt;

&lt;p&gt;For example, on my machine, this repository is located at
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/code/jekyll/peterewills.github.io/&lt;/code&gt;, and so if I link to the file
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/code/jekyll/peterewills.github.io/assets/images/kitties.jpg&lt;/code&gt; in my org file,
&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-lite&lt;/code&gt; will, upon export, transform this to a link to &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/images/kitties.jpg&lt;/code&gt;
in the markdown output. This approach is nice and simple, but it doesn’t handle relative
links, or the situation where you have multiple Jekyll projects.&lt;/p&gt;

&lt;p&gt;Anyways, if you want to give it a try, you can clone it &lt;a href=&quot;https://github.com/peterewills/ox-jekyll-lite&quot;&gt;from GitHub&lt;/a&gt; and check it
out. You can just load it up and use &lt;code class=&quot;highlighter-rouge&quot;&gt;C-c C-e j J&lt;/code&gt; to export an org file to a markdown
buffer.&lt;/p&gt;

&lt;p&gt;Finally, as a side note, I just have to give a shoutout to the excellent &lt;a href=&quot;https://github.com/magnars/s.el&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.el&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/magnars/dash.el&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dash&lt;/code&gt;&lt;/a&gt;, which makes working in elisp infinitely more pleasant. Many thanks to Magnar
Sveen for building such nice tools for us all to use.&lt;/p&gt;

&lt;h1 id=&quot;my-blogging-workflow&quot;&gt;My Blogging Workflow&lt;/h1&gt;

&lt;p&gt;Now, my workflow for writing a post is pretty simple.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Have brilliant idea&lt;/li&gt;
  &lt;li&gt;Make an org file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory, named like &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-post-name.org&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Write brilliant words/equations/cat pictures/etc.&lt;/li&gt;
  &lt;li&gt;Export to markdown via &lt;code class=&quot;highlighter-rouge&quot;&gt;C-c C-e j j&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Commit &amp;amp; push to GitHub&lt;/li&gt;
  &lt;li&gt;Profit!&lt;sup id=&quot;fnref:fn4&quot;&gt;&lt;a href=&quot;#fn:fn4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The only additional complication, compared to a pure-markdown workflow, is the addition
of the export step; other than that, it’s identical. And now I can blog in wonderful,
beautiful org mode instead of clunky markdown.&lt;/p&gt;

&lt;p&gt;An important caveat for anyone using org and Jekyll; in order to not have Jekyll stumble
over the org artifacts, you should add &lt;code class=&quot;highlighter-rouge&quot;&gt;*.org&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ltximg&lt;/code&gt; to the &lt;a href=&quot;https://github.com/peterewills/peterewills.github.io/blob/master/_config.yml#L13-L17&quot;&gt;list of excluded files&lt;/a&gt; in
your Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. You can see mine &lt;a href=&quot;https://github.com/peterewills/peterewills.github.io/blob/master/_config.yml&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you are just starting to blog, and you love org mode, I’d recommend using Hugo to
build your site, so that you can use the excellent &lt;code class=&quot;highlighter-rouge&quot;&gt;ox-hugo&lt;/code&gt;. It’s a truly org-centric
approach to building a static site, and it’s much more fully-featured than any of the
solutions I’ve found in Jekyll or Pelican.&lt;/p&gt;

&lt;p&gt;But, you might want to use Jekyll, because it integrates automagically with GitHub
pages, or perhaps you just like some of the available themes or whatnot. If that’s the
case, then I think &lt;code class=&quot;highlighter-rouge&quot;&gt;org-jekyll-lite&lt;/code&gt; is a reasonable solution for writing your posts in
org. It’s lightweight, and you’ll probably have to tweak it to fit your particular
needs, but it’s small enough that modifying it shouldn’t be too hard. Also, you can
always submit an issue on GitHub and I’ll see if I can help you out.&lt;/p&gt;

&lt;p&gt;I hope this post has inspired you to explore more in org mode! It’s a great tool for
organizing notes, tracking agendas/calendars/TODO lists, and for general
writing.&lt;sup id=&quot;fnref:fn5&quot;&gt;&lt;a href=&quot;#fn:fn5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; Happy blogging, and may the org be with you!&lt;/p&gt;

&lt;!----- Footnotes -----&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn1&quot;&gt;
      &lt;p&gt;As I explain later on, this tool was based on both &lt;a href=&quot;https://github.com/gonsie/ox-jekyll-md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-jekyll-md&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://ox-hugo.scripter.co/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ox-hugo&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#fnref:fn1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn2&quot;&gt;
      &lt;p&gt;The double slash is required because markdown interprets the first slash as an escape character. &lt;a href=&quot;#fnref:fn2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn3&quot;&gt;
      &lt;p&gt;You can see an example of adding a link to an image in the org-mode demo video linked above. &lt;a href=&quot;#fnref:fn3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn4&quot;&gt;
      &lt;p&gt;This is actually a lie; I don’t make any money from this site. &lt;a href=&quot;#fnref:fn4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn5&quot;&gt;
      &lt;p&gt;There’s also the entire subject of &lt;a href=&quot;http://cachestocaches.com/2018/6/org-literate-programming/&quot;&gt;literate programming&lt;/a&gt;, in which code is interwoven with documentation, which I think is a really nice paradigm, and for which org is a natural fit. &lt;a href=&quot;#fnref:fn5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><summary type="html">My workflow for blogging in org mode, with jekyll and org-export.</summary></entry><entry><title type="html">Your p-values Are Bogus</title><link href="http://localhost:4000/posts/2019/09/20/bogus.html" rel="alternate" type="text/html" title="Your p-values Are Bogus" /><published>2019-09-20T00:00:00+05:30</published><updated>2019-09-20T00:00:00+05:30</updated><id>http://localhost:4000/posts/2019/09/20/bogus</id><content type="html" xml:base="http://localhost:4000/posts/2019/09/20/bogus.html">&lt;p&gt;People often use a Gaussian to approximate distributions of sample means. This is
generally justified by the central limit theorem, which states that the sample mean of
an independent and identically distributed sequence of random variables converges to a
normal random variable in distribution.&lt;sup id=&quot;fnref:fnote_clt&quot;&gt;&lt;a href=&quot;#fn:fnote_clt&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; In hypothesis testing, we might use
this to calculate a &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value, which then is used to drive decision making.&lt;/p&gt;

&lt;p&gt;I’m going to show that calculating &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values in this way is actually incorrect, and
leads to results that get &lt;em&gt;less&lt;/em&gt; accurate as you collect more data! This has
substantial implications for those who care about the statistical rigor of their A/B
tests, which are often based on Gaussian (normal) approximations.&lt;/p&gt;

&lt;h1 id=&quot;a-simple-example&quot;&gt;A Simple Example&lt;/h1&gt;

&lt;p&gt;Let’s take a very simple example. Let’s say that the prevailing wisdom is that no more
than 20% of people like rollerskating. You suspect that the number is in fact much
larger, and so you decide to run a statistical test. In this test, you model each person
as a Bernoulli random variable with parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. &lt;strong&gt;The null hypothesis &lt;script type=&quot;math/tex&quot;&gt;H_0&lt;/script&gt; is
that &lt;script type=&quot;math/tex&quot;&gt;p\leq 0.2&lt;/script&gt;&lt;/strong&gt;. You decide to go out and ask 100 people their opinions on
rollerskating.&lt;sup id=&quot;fnref:fnote_sample&quot;&gt;&lt;a href=&quot;#fn:fnote_sample&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;You begin gathering data. Unbeknownst to you, it is &lt;em&gt;in fact&lt;/em&gt; the case that a full 80%
of the population enjoys rollerskating. So, as you randomly ask people if they enjoy
rollerskating, you end up getting a lot of “yes” responses. Once you’ve gotten 100
responses, you start analyzing the data.&lt;/p&gt;

&lt;p&gt;It turns out that you got 74 “yes” responses, and 26 “no” responses. Since you’re a
practiced statistician, you know that you can calculate a &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value by finding the
probability that a binomial random variable with parameter &lt;script type=&quot;math/tex&quot;&gt;p_0=0.2&lt;/script&gt; would generate a
value &lt;script type=&quot;math/tex&quot;&gt;k\geq74&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;n=100&lt;/script&gt;. This probability is just&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_\text{exact} = \text{Prob}(k\geq 74) = \sum_{k=74}^{n}{n \choose k} p_0^{k} (1-p_0)^{(n-k)}.&lt;/script&gt;

&lt;p&gt;However, you know that you can approximate a binomial distribution with a Gaussian of
mean &lt;script type=&quot;math/tex&quot;&gt;\mu=np_0&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2=np_0(1-p_0)&lt;/script&gt;, so you decide to calculate an
&lt;em&gt;approximate&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_\text{approx} = \frac{1}{\sqrt{2\pi np_0(1-p_0)}}\int_{k=74}^\infty \exp\left(-\frac{(k-np_0)^2}{2np_0(1-p_0)}\right).&lt;/script&gt;

&lt;p&gt;However, &lt;strong&gt;this approximation is actually incorrect, and will give you progressively
worse estimates of &lt;script type=&quot;math/tex&quot;&gt;p_\text{exact}&lt;/script&gt;.&lt;/strong&gt; Let’s observe this in action.&lt;/p&gt;

&lt;h2 id=&quot;python-simulation-of-data&quot;&gt;Python Simulation of Data&lt;/h2&gt;

&lt;p&gt;We simulate data for values &lt;script type=&quot;math/tex&quot;&gt;n=1&lt;/script&gt; through &lt;script type=&quot;math/tex&quot;&gt;n=1000&lt;/script&gt;, and compute the corresponding
exact and approximate &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value. We plot the log of the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; value, since they get
very small very quickly.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.stats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binom&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'classic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ggplot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p_true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p_vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true p-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'normal approx. p-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normal_dev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normal_mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the &quot;survival function&quot; is 1 - cdf, which is the p-value in our case&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normal_logpval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logsf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;true_logpval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logsf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p_vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'true p-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true_logpval&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p_vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'normal approx. p-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_logpval&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;p_vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Number of Samples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Log-p Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to drop &lt;code class=&quot;highlighter-rouge&quot;&gt;inf&lt;/code&gt;s because after about &lt;script type=&quot;math/tex&quot;&gt;n=850&lt;/script&gt; or so, the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value actually
gets too small for &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.stats&lt;/code&gt; to calculate; it just returns &lt;code class=&quot;highlighter-rouge&quot;&gt;-np.inf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The resulting plot tells a shocking tale:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/p-values.png&quot; alt=&quot;P-value Divergence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The approximation diverges from the exact value! Seeing this, you begin to weep
bitterly. Is the Central Limit Theorem invalid? Has your whole life been a lie? It turns
out that the answer to the first is a resounding no, and the second… probably also
no. But then what is going on here?&lt;/p&gt;

&lt;h2 id=&quot;convergence-is-not-enough&quot;&gt;Convergence Is Not Enough&lt;/h2&gt;

&lt;p&gt;The first thing to note is that, mathematically speaking, the two &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values
&lt;script type=&quot;math/tex&quot;&gt;p_\text{exact}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_\text{approx}&lt;/script&gt; &lt;strong&gt;do, in fact, converge&lt;/strong&gt;. That is to say,
as we increase the number of samples, their difference is approaching zero:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left| p_\text{exact} - p_\text{approx}\right| \rightarrow 0&lt;/script&gt;

&lt;p&gt;What I’m arguing, then, is that &lt;strong&gt;convergence is not enough&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If it were, then we could just approximate the true &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value with 0. That is, we
could report a &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value of &lt;script type=&quot;math/tex&quot;&gt;p_\text{approx} = 0&lt;/script&gt;, and claim that since our
approximation is converging to the actual value, it should be taken
seriously. Obviously, this should not be taken seriously as an approximation.&lt;/p&gt;

&lt;p&gt;Our intuitive sense of “convergence”, the sense that &lt;script type=&quot;math/tex&quot;&gt;p_\text{approx}&lt;/script&gt; is becoming “a
better and better approximation of” &lt;script type=&quot;math/tex&quot;&gt;p_\text{exact}&lt;/script&gt; as we take more samples,
corresponds to the &lt;em&gt;percent error&lt;/em&gt; converging to zero:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left| \frac{p_\text{approx} - p_\text{exact}}{p_\text{exact}}\right| \rightarrow 0.&lt;/script&gt;

&lt;p&gt;In terms of asymptotic decay, this is a stronger claim than convergence. Rather than
their difference converging to zero, which means it is &lt;script type=&quot;math/tex&quot;&gt;o(1)&lt;/script&gt;, we demand that their
difference converge to zero &lt;em&gt;faster than &lt;script type=&quot;math/tex&quot;&gt;p_\text{exact}&lt;/script&gt;&lt;/em&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left| p_\text{exact} - p_\text{approx}\right|  = o\left(p_\text{exact}\right).&lt;/script&gt;

&lt;p&gt;It would also suffice to have an upper bound on the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value; that is, if we could
say that &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
p_\text{exact} &lt; p_\text{approx} %]]&gt;&lt;/script&gt;, so &lt;script type=&quot;math/tex&quot;&gt;p_\text{exact}&lt;/script&gt; is &lt;em&gt;at worst&lt;/em&gt; our
approximate value &lt;script type=&quot;math/tex&quot;&gt;p_\text{approx}&lt;/script&gt;, and we knew that this held regardless of sample
size, then we could report our approximate result knowing that it was at worst a bit
conservative. However, as far as I can see, the central limit theorem and other similar
convergence results give us no such guarantee.&lt;/p&gt;

&lt;h2 id=&quot;implications&quot;&gt;Implications&lt;/h2&gt;

&lt;p&gt;What I’ve shown is that for the simple case above, Gaussian approximation is not a
strategy that will get you good estimates of the true &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value, especially for large
amounts of data. You will under-estimate your &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value, and therefore overestimate
the strength of evidence you have against the null hypothesis.&lt;/p&gt;

&lt;p&gt;Although A/B testing is a slightly more complex scenario, I suspect that the same
problem exists in that realm. A refresher on a typical A/B test scenario: you, as the
administrator of the test, care about the difference between two sample means. If they
samples are from Bernoulli random variables (a good model of click-through rates), then
the &lt;em&gt;true&lt;/em&gt; distribution of this difference is the distribution of the difference of
(scaled) binomial random variables, which is more difficult to write down and work
with. Of course, the Gaussian approximation is simple, since the difference of two
Gaussians is again a Gaussian.&lt;sup id=&quot;fnref:fnote_AB&quot;&gt;&lt;a href=&quot;#fn:fnote_AB&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Most statistical tests are approximate in this way. For example, the &lt;script type=&quot;math/tex&quot;&gt;\chi^2&lt;/script&gt; test for
goodness of fit is an approximate test. So what are we to make of the fact that this
approximation does not guarantee increasingly valid &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values? Honestly, I don’t
know. I’m sure that others have considered this issue, but I’m not familiar with the
thinking of the statistical community on it. (As always, please comment if you know
something that would help me understand this better.) All I know is that when doing
tests like this in the future, I’ll be much more careful about how I report my results.&lt;/p&gt;

&lt;h1 id=&quot;afterword-technical-details&quot;&gt;Afterword: Technical Details&lt;/h1&gt;

&lt;p&gt;As I said above, the two &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values do, in fact, converge. However, there is an
interesting mathematical twist in that &lt;strong&gt;the convergence is not guaranteed by the
central limit theorem.&lt;/strong&gt; It’s a bit besides the point, and quite technical, but I found
it so interesting that I thought I should write it up.&lt;/p&gt;

&lt;p&gt;As I said, this section isn’t essential to my central argument about the insufficiency
of simple convergence; it’s more of an interesting aside.&lt;/p&gt;

&lt;h2 id=&quot;limitations-of-the-central-limit-theorem&quot;&gt;Limitations of the Central Limit Theorem&lt;/h2&gt;

&lt;p&gt;To understand the problem, we have to do a deep dive into the details of the central
limit theorem. This will get technical. The TL;DR is that since our &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values are
getting smaller, the CLT doesn’t actually guarantee that they will converge.&lt;/p&gt;

&lt;p&gt;Suppose we have a sequence of random variables &lt;script type=&quot;math/tex&quot;&gt;X_1, X_2, X_3, \ldots&lt;/script&gt;. These would
be, in the example above, the Bernoulli random variables that represent individual people’s
responses to your question about rollerskates. Suppose that these random variables are
independent and identically distributed, with mean &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; and finite variance
&lt;script type=&quot;math/tex&quot;&gt;\sigma^2&lt;/script&gt;.&lt;sup id=&quot;fnref:fnote_bin&quot;&gt;&lt;a href=&quot;#fn:fnote_bin&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let &lt;script type=&quot;math/tex&quot;&gt;S_n&lt;/script&gt; be the sample mean of all the &lt;script type=&quot;math/tex&quot;&gt;X_i&lt;/script&gt; up through &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_n = \frac{1}{n} \sum_{i=1}^n X_i.&lt;/script&gt;

&lt;p&gt;We want to say what distribution the sample mean converges to. First, we know it’ll
converge to something close to the mean, so let’s subtract that off so that it converges
to something close to zero. So now we’re considering &lt;script type=&quot;math/tex&quot;&gt;S_n - \mu&lt;/script&gt;. But we also know
that the standard deviation goes down like &lt;script type=&quot;math/tex&quot;&gt;1/\sqrt{n}&lt;/script&gt;, so to get it to converge to
something stable, we have to multiply by &lt;script type=&quot;math/tex&quot;&gt;\sqrt{n}&lt;/script&gt;. So now we’re considering the
shifted and scaled sample mean &lt;script type=&quot;math/tex&quot;&gt;\sqrt{n}\left(S_n - \mu\right)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The central limit theorem states that this converges &lt;strong&gt;in distribution&lt;/strong&gt; to a normal
random variable with distribution &lt;script type=&quot;math/tex&quot;&gt;N(0, \sigma^2)&lt;/script&gt;. Notationally, you might see
mathematicians write&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sqrt{n}\left(S_n-\mu\right)\ \xrightarrow{D} N(0,\sigma^2).&lt;/script&gt;

&lt;p&gt;What does it mean that they converge &lt;strong&gt;in distribution&lt;/strong&gt;? It means that, for a fixed
area, the areas under the respective curves converge. Note that &lt;strong&gt;we have to fix the
area&lt;/strong&gt; to get convergence. Let’s look at some pictures. First, note that we can plot the
exact distribution of the variable &lt;script type=&quot;math/tex&quot;&gt;\sqrt{n}(S_n-\mu)&lt;/script&gt;; it’s just a binomial random
variable, appropriately shifted and scaled. We’ll plot this alongside the normal
approximation &lt;script type=&quot;math/tex&quot;&gt;N(0,\sigma^2)&lt;/script&gt;.&lt;/p&gt;

&lt;!-- I'd like to have this centered. --&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/clt.gif&quot; alt=&quot;CLT gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The area under the shaded part of the normal converges to the area of the bars in that
same shaded region. This is what convergence in distribution means.&lt;/p&gt;

&lt;p&gt;Now for the crux. As we gather data, it becomes more and more obvious that our null
hypothesis is incorrect - that is, we move further and further out into the tail of the
null hypothesis’ distribution for &lt;script type=&quot;math/tex&quot;&gt;S_n&lt;/script&gt;. This is very intuitive - as we gather more
data, we expect our &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value to go down. The &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value is a tail integral of the
distribution, so we expect to be moving further and further into the tail of the
distribution.&lt;/p&gt;

&lt;p&gt;Here’s a gif, where the shaded region represents the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value that we’re calculating:&lt;/p&gt;

&lt;!-- I'd like to have this centered. --&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/p-val.gif&quot; alt=&quot;p-value gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we increase &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, the area we’re integrating changes. So we don’t get convergence
guarantees from the CLT.&lt;/p&gt;

&lt;h2 id=&quot;the-berry-esseen-theorem&quot;&gt;The Berry-Esseen Theorem&lt;/h2&gt;

&lt;p&gt;It’s worth noting that there is a stronger statement of convergence that applies
specifically to the convergence of the binomial distribution to the corresponding
Gaussian. It is called the &lt;strong&gt;Barry-Esseen Theorem&lt;/strong&gt;, and it states that the maximum
distance between the cumulative probability functions of the binomial and the
corresponding Gaussian is &lt;script type=&quot;math/tex&quot;&gt;o(n^{-1/2})&lt;/script&gt;. This claim, which is akin to uniform
convergence of functions (compare to the pointwise convergence of the CLT) does, in
fact, guarantee that our &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values will converge.&lt;/p&gt;

&lt;p&gt;But, as I’ve said above, this is immaterial, albeit interesting; we know already that
the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values converge, and we also know that this is not enough for us to be
reporting one as an approximation of the other.&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote_clt&quot;&gt;
      &lt;p&gt;So long as the variance of the distribution being sampled is finite. &lt;a href=&quot;#fnref:fnote_clt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_sample&quot;&gt;
      &lt;p&gt;You should decide this number based on some alternative hypothesis and
a power analysis. Also, you should ensure that you are sampling people evenly -
going to a park, for example, might bias your sample towards those that enjoy
rollerskating. &lt;a href=&quot;#fnref:fnote_sample&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_AB&quot;&gt;
      &lt;p&gt;I haven’t done a numerical test on this scenario because the true
distribution (the difference between two scaled binomials) is nontrivial to
calcualte, and numerical issues arise as we calculate such small &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values, which
SciPy takes care of for us in the above example. But as I said, I would be
unsurprised if our Gaussian-approximated &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values are increasingly poor
approximations of the true &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value as we gather more samples. &lt;a href=&quot;#fnref:fnote_AB&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_bin&quot;&gt;
      &lt;p&gt;In our case, for a single Bernoulli random variable with parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;,
we have &lt;script type=&quot;math/tex&quot;&gt;\mu=p&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma^2=p(1-p)&lt;/script&gt;. &lt;a href=&quot;#fnref:fnote_bin&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">Is hypothesis testing built upon a house of lies? No, probably not. But still, read this article.</summary></entry><entry><title type="html">DS Interview Study Guide Part II: Software Engineering</title><link href="http://localhost:4000/posts/2019/08/29/engineering.html" rel="alternate" type="text/html" title="DS Interview Study Guide Part II: Software Engineering" /><published>2019-08-29T00:00:00+05:30</published><updated>2019-08-29T00:00:00+05:30</updated><id>http://localhost:4000/posts/2019/08/29/engineering</id><content type="html" xml:base="http://localhost:4000/posts/2019/08/29/engineering.html">&lt;p&gt;This post continues my series on data science interviews. One of the major difficulty of
doing data science interviews is that you must show expertise in a wide variety of
skills. In particular, I see four key subject areas that you might be asked about during
an interview:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Statistics&lt;/li&gt;
  &lt;li&gt;Software Engineering/Coding&lt;/li&gt;
  &lt;li&gt;Machine Learning&lt;/li&gt;
  &lt;li&gt;“Soft” Questions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post focuses on software engineering &amp;amp; coding. It will be primarily a resource for
aggregating content that I think you should be familiar with. I will mostly point to
outside sources for technical exposition and practice questions.&lt;/p&gt;

&lt;p&gt;I’ll link to these as appropriate throughout the post, but I thought it would be helpful
to put up front a list of the primary resources that I’ve used when studying for
interviews. Some of my favorites are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/&quot;&gt;Data Structures and Algorithms in Python&lt;/a&gt;, for a good introduction to
data structures such as linked lists, arrays, hashmaps, and so on. It also can give
you good sense of how to write idiomatic Python code, for building fundamental
classes.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sqlzoo.net/&quot;&gt;SQLZoo&lt;/a&gt; for studying SQL and doing practice questions. I particularly like
the “assessments”.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt; for lots of practice questions organized by
subject, and good general advice for the technical interviewing process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also use coding websites like LeetCode to practice various problems. I also look on
Glassdoor to see &lt;a href=&quot;https://www.glassdoor.com/Interview/san-francisco-data-scientist-interview-questions-SRCH_IL.0,13_IM759_KO14,28.htm&quot;&gt;what kinds of problems&lt;/a&gt; people have been asked.&lt;/p&gt;

&lt;p&gt;As always, I’m working to improve this post, so please do leave comments with feedback.&lt;/p&gt;

&lt;h1 id=&quot;what-languages-should-i-know&quot;&gt;What Languages Should I Know?&lt;/h1&gt;

&lt;p&gt;In this section of data science interviews, your are generally asked to implement things
in code. So, which language should you do it in? Generally, the best answer is
(unsurprisingly) that &lt;strong&gt;you should work in Python&lt;/strong&gt;. The next most popular choice is R;
I’m not very familiar with R, so I can’t really speak to it’s capabilities.&lt;/p&gt;

&lt;p&gt;There are a few reasons you should work in Python:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s widely adopted within industry.&lt;/li&gt;
  &lt;li&gt;It has high-quality, popular packages for working with data (see &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;statsmodels&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;, etc).&lt;/li&gt;
  &lt;li&gt;It bridges the gap between academic work (e.g. using NumPy to build a fast solver for
differential equations) and industrial work (e.g. using Django to build webservices).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is far from an exhaustive list. Anyways, I mostly work in Python. I think it’s a
nice language because it is clear and simple to write.&lt;/p&gt;

&lt;p&gt;If you want to use another language, you should make sure that you can do everything you
need to - this includes reading &amp;amp; writing data, cleaning/munging data, plotting,
implementing statistical and machine learning models, and leveraging basic data types
like hashmaps and arrays (more on those later).&lt;/p&gt;

&lt;p&gt;I think if you wanted to do your interviews in R it would be fine, so long as you can do
the above. I would strongly recommend against languages like MATLAB, which are
proprietary and not open-source.&lt;/p&gt;

&lt;p&gt;Languages like Java can be tricky since they might not have the data-oriented libraries
that Python has. For example, I’ve worked profesionally in Scala, and am very
comfortable manipulating data via the Spark API within it, but still wouldn’t want to
have to use it in an interview; it just isn’t as friendly for general-purpose hacking as
Python.&lt;/p&gt;

&lt;p&gt;So is Python all you need? Well, not quite. You should also be familiar with SQL for
querying databases; we’ll get into that later. I don’t think the dialect you use
particularly matters. &lt;a href=&quot;https://sqlzoo.net/&quot;&gt;SQLZoo&lt;/a&gt; works with MySQL, which is fine. Familiarity with
bash and shell-scripting is useful for a data scientist in their day-to-day work, but
generally isn’t asked about in interviews. For the interviews, I’d say if you know one
general-purpose language (preferably Python, or R if need be) and SQL, then you’ll be
fine.&lt;/p&gt;

&lt;h1 id=&quot;general-tips-for-coding-interviews&quot;&gt;General Tips for Coding Interviews&lt;/h1&gt;

&lt;p&gt;Coding interviews are notorious for being high-stress, so it’s important that you
practice in a way that will maximize your comfort during the interview itself - you
don’t want to add any unnecessary additional stress into an already difficult
situation. There are a wide variety of philosophies and approaches to preparing yourself
for and executing a successful interview. I’m going to talk about some points that
resonate with me, but I’d also recommend reading &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt;
for a good discussion. Of course, this isn’t the final word on the topic - there are
endless resources available online that address this.&lt;/p&gt;

&lt;h2 id=&quot;how-to-prepare&quot;&gt;How to Prepare&lt;/h2&gt;

&lt;p&gt;When preparing for the interview, make sure to practice in an environment similar to the
interview environment. There are a few aspects of this to keep in mind.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure that you replicate the &lt;strong&gt;writing environment&lt;/strong&gt; of the interview. So, if
you’ll be coding on a whiteboard, try to get access to a whiteboard to practice. At
least practice on a pad of paper, so that you’re comfortable with handwriting code -
it’s really quite different than using a text editor. If you’ll be coding in a Google
Doc, practice doing that (protip: used a monospaced font). Most places I’ve
interviewed at don’t let you evaluate your code to test it, so you have to be prepared
for that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Time yourself!&lt;/strong&gt; It’s important to make sure you can do these things in a reasonable
amount of time. Generally, these things last 45 minutes per “round” (with multiple
rounds for on-site interviews). Focus on being efficient at implementing simple ideas,
so that you don’t waste a bunch of time with your syntax and things like that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Practice talking.&lt;/strong&gt; If you practice by coding silently by yourself, then it might
feel strange when you’re in the interview and have to talk through your process. The
best is if you can have a friend who is familiar with interviewing play the
interviewer, so that you can talk to them, get asked questions, etc. You can also
record yourself and just talk to the recorder, so that you get practice externalizing
your thoughts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some services online that will do “practice” interviews for you. When I was
practicing for a software engineer interview with Google, I used &lt;a href=&quot;http://www.gainlo.co/#!/&quot;&gt;Gainlo&lt;/a&gt; for
this - they were kind of expensive, but you interview with real Google software
engineers, which I found helpful.&lt;/p&gt;

&lt;p&gt;However, the interviews for a software engineering position at Google are very
standardized in format. I haven’t used any of the services that do this for data
science, and the interviews you’ll face are so varied. Therefore, I imagine it is harder
to do helpful “mock interviews”. If you’ve used any of these services, I’d be very
curious to hear about your experience.&lt;/p&gt;

&lt;h2 id=&quot;tips-for-interviewing&quot;&gt;Tips for Interviewing&lt;/h2&gt;

&lt;p&gt;There are some things it’s important to keep in mind as you do the interview itself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Talk about your thought process.&lt;/strong&gt; Don’t just sit sliently thinking, then go and
write something on the board. Let the interviewer into your mind so that they can see
how you are thinking about the problem. This is good advice at any point in a
technical interview.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Start with a simple solution you have confidence in.&lt;/strong&gt; If you know that you can
quickly write up a suboptimal solution (in this case, maybe insertion sort), then do
that! You can discuss &lt;em&gt;why&lt;/em&gt; that solution is sub-optimal, and they will often
brainstorm with you about how to improve it. That said, if you are just as confident
in writing up something more optimal (say, quicksort) then feel free to jump right to
that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sketch out your solution before doing real code.&lt;/strong&gt; This is not necessary, but
sometimes for complicated stuff it’s nice to write out your approach in pseudocode
before jumping into real code. This can also help with exposing your thought process
to the interviewer, and making sure they’re on board with how you’re thinking about
it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Think about edge cases.&lt;/strong&gt; Suppose they ask you to write a function that sorts a
list. What if you’re given an empty list? What if you’re given a list of
non-comparable things? (In Python, this might be a list of lists.) What does your
function do in this case?  Is that what you &lt;em&gt;want&lt;/em&gt; it to do? There’s no right answer
here, but you should definitely be thinking about this and asking the interview how
they want the function to behave on these cases.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be sure to do a time complexity analysis on your solution.&lt;/strong&gt; They want to know that
you can think about efficiency, so unless they explicitly ask you not to do this, I’d
recommend it. We’ll discuss more about what this means below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a more thorough discussion of preparation and day-of techniques, I’d recommend
&lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tips-for-coding&quot;&gt;Tips for Coding&lt;/h2&gt;

&lt;p&gt;There are few things specifically in how the interviewee writes code that I think are
worth mentioning. This kind of stuff usually isn’t a huge deal, but if you write good
code, it can show professionalism and help leave a good impression.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Name your variables well.&lt;/strong&gt; If the variable is the average number of users per
region, use &lt;code class=&quot;highlighter-rouge&quot;&gt;num_users_per_region&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;users_per_region&lt;/code&gt;, not &lt;code class=&quot;highlighter-rouge&quot;&gt;avg_usr&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;num_usr&lt;/code&gt;. Unlike in mathematics, it’s good to have long, descriptive variables.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use built-ins when you can!&lt;/strong&gt; Python already &lt;em&gt;has&lt;/em&gt; functions for sorting, for
building cartesian products of lists, for implementing various models (in
&lt;code class=&quot;highlighter-rouge&quot;&gt;statsmodels&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;), and endless other things. It also has some cool
data structures already implemented, like the &lt;a href=&quot;https://docs.python.org/3.7/library/heapq.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;heap&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://docs.python.org/3/library/queue.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;queue&lt;/code&gt;&lt;/a&gt;. Get to know the &lt;code class=&quot;highlighter-rouge&quot;&gt;itertools&lt;/code&gt; module; it has lots of usefull stuff.
if you can use these built-ins effectively, it demonstrates skill and knowledge
without adding much effort on your part.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Break things into functions.&lt;/strong&gt; If one step of your code is sorting a list, and you
can’t use the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;sorted()&lt;/code&gt; function, then write a separate function &lt;code class=&quot;highlighter-rouge&quot;&gt;def
sort()&lt;/code&gt; before you write your main function. This increases both readability and
testability of code, and is essential for real-world software.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write idiomatic Python.&lt;/strong&gt; This is a bit less important, but make sure to iterate
directly over iterables, don’t do &lt;code class=&quot;highlighter-rouge&quot;&gt;for i in range(len(my_iterable))&lt;/code&gt;. Also,
familiarize yourself with &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; and know how to use them. Know how to
use list compreshensions, and be aware that you can do a similar thing for
dictionaries, sets, and even arguments of functions - for example, you can do
&lt;code class=&quot;highlighter-rouge&quot;&gt;max(item for item in l if item % 2 == 0)&lt;/code&gt; to find the maximum even number in l. Know
how to do string formatting using either &lt;code class=&quot;highlighter-rouge&quot;&gt;.format()&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;-strings in Python
3.&lt;sup id=&quot;fnref:fnote_py3&quot;&gt;&lt;a href=&quot;#fn:fnote_py3&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m only scratching the surface of how to write good code. It helps to read code that
others have written to see what you don’t know. You can also look at code in large
open-source libraries.&lt;/p&gt;

&lt;p&gt;With all that said, let’s move on to some of the content that might be asked about in
these interviews.&lt;/p&gt;

&lt;h1 id=&quot;working-with-data&quot;&gt;Working with Data&lt;/h1&gt;

&lt;p&gt;One of the fundamental tasks of a data scientist is to load, manipulate, clean, and
visualize data in various formats. I’ll go through some of the basic tasks that I think
you should be able to do, and either include or link to Python implementations. If you
work in R, or any other language, you should make sure that you can still do these
things in your preferred language.&lt;/p&gt;

&lt;p&gt;In Python, the key technologies are the packages pandas (for loading, cleaning, and
manipulating data), numpy (for efficiently working with unlabeled numeric data), and
matplotlib (for plotting and visualizing data).&lt;/p&gt;

&lt;h2 id=&quot;loading--cleaning-data&quot;&gt;Loading &amp;amp; Cleaning Data&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.datacamp.com/community/tutorials/pandas-read-csv&quot;&gt;This tutorial on DataCamp&lt;/a&gt; nicely deals with the basics of using
&lt;code class=&quot;highlighter-rouge&quot;&gt;pd.read_csv()&lt;/code&gt; to load data into Pandas. It is also possible to load from other
formats, but in my experience writing to and from comma- or tab-separated plaintext is
by far the most common approach for datasets that fit in memory.&lt;sup id=&quot;fnref:fnote_parquet&quot;&gt;&lt;a href=&quot;#fn:fnote_parquet&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For example, suppose you had the following data in a csv file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name,age,country,favorite color
steve,7,US,green
jennifer,14,UK,blue
franklin,,UK,black
calvin,22,US,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can copy and paste this, into Notepad or whatever text editor you
like&lt;sup id=&quot;fnref:fnote_emacs&quot;&gt;&lt;a href=&quot;#fn:fnote_emacs&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, and save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;data.csv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should be able to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;load in data from text, whether it is separated by commas, tabs, or some other
arbitrary character (sometimes things are separated by the “pipe” character &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;). In
this case, you can just do &lt;code class=&quot;highlighter-rouge&quot;&gt;df = pd.read_csv('data.csv')&lt;/code&gt; to load it.&lt;/li&gt;
  &lt;li&gt;Filter for missing data. If you wanted to find the row(s) where the age is missing,
for example, you could do &lt;code class=&quot;highlighter-rouge&quot;&gt;df[df['age'].isnull()]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Filter for data values. For example, to find people from the US, do &lt;code class=&quot;highlighter-rouge&quot;&gt;df[df['country'] == 'US']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Replace missing data; use &lt;code class=&quot;highlighter-rouge&quot;&gt;df.fillna(0)&lt;/code&gt; to replace missing data with zeros. Think for
yourself about how you would want to handle missing data in this case - does it make
sense to replace everything with zeros? What &lt;em&gt;would&lt;/em&gt; make sense?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dealing with missing data is, in particular, an important problem, and not one that has
an easy answer. &lt;a href=&quot;https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4&quot;&gt;Towards Data Science&lt;/a&gt; has a decent post on this
subject, but if you’re curious, there’s a lot to read about and learn here.&lt;/p&gt;

&lt;p&gt;More advanced topics in pandas-fu include &lt;a href=&quot;https://wesmckinney.com/blog/groupby-fu-improvements-in-grouping-and-aggregating-data-in-pandas/&quot;&gt;using &lt;code class=&quot;highlighter-rouge&quot;&gt;groupby&lt;/code&gt;&lt;/a&gt;, joining
dataframes (this is called a “merge” in pandas, but works the same as a SQL join), and
&lt;a href=&quot;https://hackernoon.com/reshaping-data-in-python-fa27dda2ff77&quot;&gt;reshaping data&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I said before, loading and manipulating data is one of the fundamental tasks of a
data scientist. You should probably be comfortable doing most or all of these tasks if
asked. Pandas can be a bit unintuitive, so I’d recommend practicing if you aren’t
already comfortable with it. Doing slicing and reshaping tasks in numpy is also an
important skill, so make sure you are comfortable with that as well.&lt;/p&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;

&lt;p&gt;Another essential aspect of data work is visualization. Of course, this is an entire
field unto itself; here, I’ll mostly be focusing on the practical aspects of making
simple plots. If you want to start to learn more about the overarching principles of the
visual representation of data, &lt;a href=&quot;https://www.edwardtufte.com/tufte/books_vdqi&quot;&gt;Tufte’s book&lt;/a&gt; is the classic in the field.&lt;/p&gt;

&lt;p&gt;In Python, the fundamental tool used for data visualization is the library
&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;. There exist many other libraries for more complicated visualization tasks,
such as &lt;code class=&quot;highlighter-rouge&quot;&gt;seaborn&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bokeh&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;plotly&lt;/code&gt;, but the only one that you really &lt;em&gt;need&lt;/em&gt; to be
comfortable with (in my opinion) is &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should be comfortable with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;plotting two lists against one another&lt;/li&gt;
  &lt;li&gt;changing the labels on the x- and y-axis of your plot, and adding a title&lt;/li&gt;
  &lt;li&gt;changing the x- and y-limits of your plot&lt;/li&gt;
  &lt;li&gt;plotting a bar graph&lt;/li&gt;
  &lt;li&gt;plotting a histogram&lt;/li&gt;
  &lt;li&gt;plotting two curves together, labelling them, and adding a legend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won’t go through the details here - I’m sure you can find many good guides to each of
these online. The &lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/pyplot.html&quot;&gt;matplotlib pyplot tutorial&lt;/a&gt; is a good place to
start.&lt;sup id=&quot;fnref:fnote_pyplot&quot;&gt;&lt;a href=&quot;#fn:fnote_pyplot&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;It’s worth noting that you can plot directly from pandas, by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;df.plot()&lt;/code&gt;. This
just calls out to matplotlib and plots your dataframe; I will often find myself both
plotting from the pandas &lt;code class=&quot;highlighter-rouge&quot;&gt;DataFrame.plot()&lt;/code&gt; method as well as directly using
&lt;code class=&quot;highlighter-rouge&quot;&gt;pyplot.plot()&lt;/code&gt;. They work on the same objects, and so you can use them together to make
more complicated plots with multiple values plotted.&lt;/p&gt;

&lt;h1 id=&quot;data-structures--algorithms&quot;&gt;Data Structures &amp;amp; Algorithms&lt;/h1&gt;

&lt;p&gt;Designing and building effective software is predicated on a solid understanding of the
basic data structures that are available, and familiarity with the ways that they are
employed in common algorithms. For me, learning this material opened up the world of
software engineering - it illuminated the inner workings of computer languages. It also
helped me understand the pros and cons of various approaches to problems, in ways that I
wouldn’t have been able to before.&lt;/p&gt;

&lt;p&gt;This subject is fundamental to software engineering interviews, but for data scientists,
its importance can vary drastically from role to role. For engineering-heavy roles, this
material can make up half or more of the interview, while for more statistician-oriented
roles, it might only be very lightly touched upon. You will have to use your judgement
to determine to what extent this material is important to you.&lt;/p&gt;

&lt;p&gt;I learned this material when I was interviewing by reading the book &lt;a href=&quot;https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/&quot;&gt;Data Structures and
Algorithms in Python&lt;/a&gt;.&lt;sup id=&quot;fnref:fnote_dsa2&quot;&gt;&lt;a href=&quot;#fn:fnote_dsa2&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; It’s really a great book - it has good, clear
explanations of all the important topics, including complexity analysis and some of the
basics of the Python language. I can’t recommend it highly enough if you want to get
more familiar with this material.&lt;sup id=&quot;fnref:fnote_dsa&quot;&gt;&lt;a href=&quot;#fn:fnote_dsa&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; You can buy it, or look around online for
the PDF - it shouldn’t be too hard to find.&lt;/p&gt;

&lt;h2 id=&quot;time-and-space-complexity-analysis&quot;&gt;Time and Space Complexity Analysis&lt;/h2&gt;

&lt;p&gt;Before you begin writing algorithms, you need to know how to analyze their
complexity. The “complexity” of an algorithm tells you how the amount of time (or space)
that the algorithm takes depends on the size of the input data.&lt;/p&gt;

&lt;p&gt;It is formalized using the so-called “big-O” notation. The precise mathematical
definition of &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt; is somewhat confusing, so you can just think of it
roughly as meaning that an algorithm that is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt; “scales like &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;”; so,
if you double the input size, you double the amount of time it takes. If an algorithm is
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^3)&lt;/script&gt;, then, doubling the input size means that you multiply the time it
takes by &lt;script type=&quot;math/tex&quot;&gt;2^3 = 8&lt;/script&gt;.&lt;sup id=&quot;fnref:fnote_bigo&quot;&gt;&lt;a href=&quot;#fn:fnote_bigo&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; You can see how even a &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^2)&lt;/script&gt; algorithm wouldn’t
work for large data; even if it runs in a reasonable amount of time (say, 5 seconds)for
10,000 points, it would take about 15,000 years to run on 1 billion data
points. Obviously, this is no good.&lt;/p&gt;

&lt;p&gt;So complexity analysis is critical. You don’t want to settle for a &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^2)&lt;/script&gt;
solution when a &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n \log n)&lt;/script&gt; solution is available. I
won’t get into how to do the analysis here, besides saying that I often like to annotate
my loops with their complexity when I’m writing things. For example, here’s a (slow)
approach to finding the largest k (unique) numbers in a list:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_top_k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;top_k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# happens k times&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# O(n)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;top_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# O(n)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;top_k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top_remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# O(1)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top_k&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know that the outer loop happend &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; times, and since finding the maximum of a list is
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;, the total task is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(nk)&lt;/script&gt;.&lt;sup id=&quot;fnref:fnote_asymptotics&quot;&gt;&lt;a href=&quot;#fn:fnote_asymptotics&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; To learn
more about how to do complexity analysis, I’d look at &lt;a href=&quot;https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/&quot;&gt;DS&amp;amp;A&lt;/a&gt;, &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the
Coding Interview&lt;/a&gt;, or just look around online - I’m sure there are plenty of good
resources out there.&lt;/p&gt;

&lt;p&gt;You can also consider not just the time of computation, but the amount of memory (space)
that your algorithm uses. This is not quite as common as time-complexity analysis, but
is still important to be able to do.&lt;/p&gt;

&lt;p&gt;A very useful resource for anyone studying for a coding interview is the &lt;a href=&quot;https://www.bigocheatsheet.com/&quot;&gt;big-O cheat
sheet&lt;/a&gt;, which shows the complexity of access, search, insertion, and deletion for
various data types, as well as the complexity of searching algorithms, and a lot more. I
often use it as a reference, but of course it’s important that you understand &lt;em&gt;why&lt;/em&gt; (for
example) an array has &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt; insertion. Just memorizing complexities won’t
help you much.&lt;/p&gt;

&lt;h2 id=&quot;arrays--hashmaps&quot;&gt;Arrays &amp;amp; Hashmaps&lt;/h2&gt;

&lt;p&gt;In my opinion, the two essential data structures for a data scientist to know are
the array and the hashmap. In Python, the &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; type is an array, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; type
is a hashmap. Since both are used so commonly, you have to know their properties if you
want to be able to design efficient algorithms and do your complexity analysis
correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt; are a data type where a piece of data (like a string) is linked to an index
(in Python, this is an integer, starting with 0). I won’t go too deep into the details
here, but for arrays, the important thing to know is that getting any element of an
array is easy (i.e. doing &lt;code class=&quot;highlighter-rouge&quot;&gt;mylist[5]&lt;/code&gt; is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt;, so it doesn’t depend on the
size of the array) but adding elements (particularly in the beginning or middle of the
array) is difficult; doing &lt;code class=&quot;highlighter-rouge&quot;&gt;mylist.insert(k, 'foo')&lt;/code&gt; is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n-k)&lt;/script&gt;, where
&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; is the position you wish to insert at.&lt;sup id=&quot;fnref:fnote_linked&quot;&gt;&lt;a href=&quot;#fn:fnote_linked&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Arrays are what we usually use when we’re building unordered, unlabelled collections of
objects in Python. This is fine, since insertion at the end of an array is fast, and
we’re often accessing slices of arrays in a complicated fashion (particularly in
numpy). I generally use arrays by default, without thinking too much about it, and it
generally works out alright.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashmaps&lt;/strong&gt; also link values to keys, but in this case the key can be anything you
want, rather than having to be an ordered set of integers. In Python, you build them by
specifying the key and the value, like &lt;code class=&quot;highlighter-rouge&quot;&gt;{'key': 'value'}&lt;/code&gt;. Hashmaps are magical in that
accessing elements &lt;em&gt;and&lt;/em&gt; adding elements are both
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt;.&lt;sup id=&quot;fnref:fnote_array_hashmap&quot;&gt;&lt;a href=&quot;#fn:fnote_array_hashmap&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; Why is this cool? Well, say you wanted to
store a bunch of people’s names and ages. You might think to do a list of tuples:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;names_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Peter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Jeff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, if you wanted to find out Jeff’s age, you would have to iterate through the list
and find the correct tuple:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# happens n times&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Jeff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jeff's age is {age}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt; - not very efficient. With hashmaps, you can just do&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Peter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Kat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Jeff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jeff's age is {name_ages['Jeff']}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# O(1)! Wow!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It might not be obvious how cool this is until you see how to use it in
problems. &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt; has lots of good problems on hashmaps,
but I’ll just reproduce some of the classics here. I think it’s worth knowing these,
because they really can give you an intuitive sense of when and how hashmaps are
valuable.&lt;/p&gt;

&lt;p&gt;The first classic hashmap algorithm is &lt;strong&gt;counting frequencies of items in a list.&lt;/strong&gt; That
is, given a list, you want to know how many times each item appears. You can do this via
the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_freqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freqs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# happens O(n) times&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This check is O(1)! Wow!&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;freqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;freqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Also O(1)! Wow!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freqs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try and think of how you’d do this &lt;em&gt;without&lt;/em&gt; hashmaps. Probably, you’d sort the list,
and then look at adjacent values. But sorting is, at best &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(\log n)&lt;/script&gt;. This
solution does it in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;!&lt;/p&gt;

&lt;p&gt;Another classic problem that is solved with hashmaps is to &lt;strong&gt;find all repeated elements
in a list.&lt;/strong&gt; This is really just a variant of the last, where you look for elements that
have frequency greater than 1.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_repeated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_freqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if you only need &lt;em&gt;one&lt;/em&gt; repeated element, you can be efficient and just terminate on
the first one you find. For this, we’ll use a &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;, which is just a &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; with values
of &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;. That is to say, &lt;strong&gt;sets are also hashmaps&lt;/strong&gt;. The important thing to know is
that adding to them and checking if something is in them are both &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_repeated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# happens O(n) times&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# This check is O(1)! Wow!&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# if this happens, all elements are unique&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last one we’ll do is a bit trickier. You’re given a list of numbers, and a “target”,
and your task is to find a pair of numbers in the list that add up to the target. Try
and think for yourself how you’d do this - the fact you use hashmaps is a big hint. You
should be able to do it in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Have you thought about it? When I first encountered this one I had to look up the
answer. But here’s how you do it in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_sum_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nums_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;other_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nums_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# no-op if num is already there&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;other_num = target-num&lt;/code&gt; is the number that you would need to complete the sum
pair; using a hashmap, you can check in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt; if you’ve already seen it!
Wow!&lt;/p&gt;

&lt;p&gt;Hopefully you get it - hashmaps are cool. Go on LeetCode, or pop open &lt;a href=&quot;https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/&quot;&gt;your favorite
data structures book&lt;/a&gt;, or even &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt;, and
get some practice with them.&lt;/p&gt;

&lt;h2 id=&quot;sorting--searching&quot;&gt;Sorting &amp;amp; Searching&lt;/h2&gt;

&lt;p&gt;Sorting and searching are two of the basic tasks you have to be familiar with for any
coding interview. You can go into a lot of depth with these, but I’ll stick to the
basics here, because that’s what I find most helpful.&lt;/p&gt;

&lt;h3 id=&quot;sorting&quot;&gt;Sorting&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt; is a nice problem in that the statement of the problem is fairly
straightforward; given a list of numbers, reorder the list so that every element is less
than or equal to the next. There are a number of approaches to sorting. The naive
approach is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;&lt;strong&gt;insertion sort&lt;/strong&gt;&lt;/a&gt;; for example, it is what most people
do when sorting a hand of cards. It has some advantages, but is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^2)&lt;/script&gt; in
time, and so is not the most efficient available.&lt;/p&gt;

&lt;p&gt;The two most common fast sorting algorithms are &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;&lt;strong&gt;quicksort&lt;/strong&gt;&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Merge_sort&quot;&gt;&lt;strong&gt;mergesort&lt;/strong&gt;&lt;/a&gt;. They are both &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n \log n)&lt;/script&gt; in
time,&lt;sup id=&quot;fnref:fnote_sort&quot;&gt;&lt;a href=&quot;#fn:fnote_sort&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; and so scale close-to-linearly with the size of the list. I won’t go
into the implementation details here; there are plenty of good discussions of them
available on the internet.&lt;/p&gt;

&lt;p&gt;When thinking about sorting, it’s also worth considering space complexity -
can you sort without needing to carry around a second sorted copy of the list? If so,
that’s a significant advantage, especially for larger lists. It’s also worth thinking
about worst-case vs. average performance - how does the algorithm perform on a randomly
shuffled list, and how does it perform on a list specifically designed to take the
maximum number of steps for that algorithm to sort? Quicksort, for example, is actually
&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^2)&lt;/script&gt; in the worst case, but is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n \log n)&lt;/script&gt; on
average. Again, you can look to the &lt;a href=&quot;https://www.bigocheatsheet.com/&quot;&gt;big-O cheat sheet&lt;/a&gt; to make sure you’re
remembering all your complexities correctly.&lt;/p&gt;

&lt;h3 id=&quot;searching&quot;&gt;Searching&lt;/h3&gt;

&lt;p&gt;The problem of &lt;strong&gt;searching&lt;/strong&gt; is often stated as &lt;strong&gt;given a sorted list &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt; and an object
&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, find the index at which an element &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; lives.&lt;/strong&gt; (You should immediately ask: What
should I return if &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is not in &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;?)The name of the game here is &lt;strong&gt;binary
search&lt;/strong&gt;. You basically split the list, then if the number is greater than the split,
search the top; otherwise, search the bottom. This is an example of a &lt;em&gt;recursive
algorithm&lt;/em&gt;, so the way it’s written can be a bit opaque to those not used to looking at
recursive code. Once I can wrap my head around it, I find it quite elegant. The
important thing to know is that this search is &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(\log n)&lt;/script&gt;, which means that
you don’t touch every element in the list - it’s very fast, even for a large list. The
key to this is that the list is already sorted - if it’s not sorted, then you’re out of
luck; you’ve got to check every element to find &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are tons of examples of binary search in Python online, so I won’t put one
here. That said, I have found it interesting to see how thinking in terms of binary
search can help you in a variety of areas.&lt;/p&gt;

&lt;p&gt;For example, suppose you had some eggs, and worked in a 40-story building, and wanted to
know the highest floor you could drop the egg off of without it breaking (it’s kind of a
dumb example cause the egg would probably break even on the first floor, but pretend
it’s a super-tough egg.) You could drop it from the first floor, and see what
happens. Say it doesn’t break. Then drop it from the 40th, and see what happens. Say it
does break. Then, you bisect and use the midpoint - drop from the 20th floor. If it
breaks here, you next try the 10th - if it doesn’t you next try the 30th. This allows
you to find the correct floor much faster than trying each floor in succession.&lt;/p&gt;

&lt;p&gt;Sorting and searching are fundamental algorithms, and have been well studied for
decades. Having a basic fluency in them shows a familiarity with the field of computers
science that many employers like to see. In my opinion, &lt;strong&gt;you should be able to quickly
and easily implement the three sorting algorithms above, and binary search,&lt;/strong&gt; in Python,
or whatever your language of choice is.&lt;/p&gt;

&lt;h1 id=&quot;working-with-sql&quot;&gt;Working with SQL&lt;/h1&gt;

&lt;p&gt;Finally, let’s talk a bit about SQL. SQL is a tool used to interact with so-called
“relational” databases, which just means that each row in a table has certain values
(columns), and that those values have the same type for each row (that is, the schema is
uniform throughout the table).&lt;sup id=&quot;fnref:fnote_nosql&quot;&gt;&lt;a href=&quot;#fn:fnote_nosql&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; It is not exactly a language, it’s more
like a family of languages. There are many “dialects” which all have slight differences,
but they behave the same with regards to core functionality; for example, you can do&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in any SQL-like language.&lt;sup id=&quot;fnref:fnote_ansi&quot;&gt;&lt;a href=&quot;#fn:fnote_ansi&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt; Modern data-storage and -access solutions like
Spark and Presto are very different from older databases in their underlying
architecture, but still use a SQL dialect for accessing data.&lt;/p&gt;

&lt;p&gt;Solving problems in SQL involves thinking in a quite different way than solving a
similar problem on an array in Python. There is no real notion of iteration, or at least
it’s not easily accessible, so most of the complicated action happens via table joins. I
used &lt;a href=&quot;https://sqlzoo.net/&quot;&gt;SQLZoo&lt;/a&gt;, and particularly the “assessments”, to practice my SQL and get it
up to snuff. LeetCode also has a SQL section (I think they call it “database”).&lt;/p&gt;

&lt;p&gt;It’s essential to know SQL as a working data scientist. You’ll almost certainly use it
in your day-to-day activities. That said, it’s not always asked in the interviews, so
you might clarify with the company whether they will ask you SQL questions.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-dialects&quot;&gt;A Note on Dialects&lt;/h2&gt;

&lt;p&gt;There are many dialects of SQL, and changing the dialect changes things like (for
example) how you work with dates. It’s worth asking the company you’re interviewing with
what dialect they want you to know, if they have one in mind. If you’re just writing SQL
on a whiteboard, then I would be surprised if they were picky about this; I would just
say something like “here I’d use &lt;code class=&quot;highlighter-rouge&quot;&gt;DATE(table.dt_str)&lt;/code&gt; or whatever the string-to-date
conversion function is in your dialect”. In this case it’s just details that move
around, but the big picture is generally the same for different dialects.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Coding interviews are stressful. From what I can tell, that’s just the way it is. For
me, the best antidote to that is being well-prepared. I think companies are moving more
towards constructive, cooperative interview formats, and away from the classic Google
brain-teaser kind of questions, which helps with this, but you can still expect to be
challenged during these interviews.&lt;/p&gt;

&lt;p&gt;Remember to be kind to yourself. You’ll probably fail many times before you
succeed. That’s fine, and is what happens to almost everyone. Just keep practicing, and
keep learning from your mistakes. Good luck!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote_py3&quot;&gt;
      &lt;p&gt;You should be using Python 3 at this point, but also be familiar with the
differences between 2 and 3, and be able to write code in Python 2 if need be. &lt;a href=&quot;#fnref:fnote_py3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_parquet&quot;&gt;
      &lt;p&gt;For “big data” stored in the cloud, an efficient format called Parquet
is the standard. In my experience, however, it’s uncommon to work with parquet files
directly in Pandas; you often read them into a distributed framework like Spark and work
with them in that context. &lt;a href=&quot;#fnref:fnote_parquet&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_emacs&quot;&gt;
      &lt;p&gt;The correct answer is, of course, emacs. &lt;a href=&quot;#fnref:fnote_emacs&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_pyplot&quot;&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyplot&lt;/code&gt; is an API within matplotlib that was designed in order to
mimic the MATLAB plotting API. It is generally what I use; I begin most of my matplotlib
work with &lt;code class=&quot;highlighter-rouge&quot;&gt;from matplotlib import pyplot as plt&lt;/code&gt;. I only rarely need to &lt;code class=&quot;highlighter-rouge&quot;&gt;import
matplotlib&lt;/code&gt; direct, and that’s generally for configuration work. &lt;a href=&quot;#fnref:fnote_pyplot&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_dsa2&quot;&gt;
      &lt;p&gt;I read the book when preparing for a software engineer interview at
Google, so I picked up a lot more than was necessary for a data science interview. I
still find the material helpful, however, and it’s nice to be able to demonstrate
that you have gone above and beyond in a realm that data scientists sometimes
neglect (efficient software design). &lt;a href=&quot;#fnref:fnote_dsa2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_dsa&quot;&gt;
      &lt;p&gt;It goes well beyond what you’ll need for a data science interview,
however - it gets into tree structures, graphs (and graph traversal algorithms), and
other more advanced topics. I’d recommend focusing on complexity analysis, arrays,
and hashmaps as the most important data structures that a data scientist will use
day-to-day. &lt;a href=&quot;#fnref:fnote_dsa&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_bigo&quot;&gt;
      &lt;p&gt;This is only approximately true, or rather it is is &lt;em&gt;asymptotically&lt;/em&gt;
true; this scaling law holds in the limit as &lt;script type=&quot;math/tex&quot;&gt;n\rightarrow\infty&lt;/script&gt;. &lt;a href=&quot;#fnref:fnote_bigo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_asymptotics&quot;&gt;
      &lt;p&gt;It’s a bit weird to use &lt;em&gt;both&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; in your
complexity - mathematically, what this means is that we consider them separate
variables , and we can take the limit of either one independently from the
other. If, for example, you knew that &lt;script type=&quot;math/tex&quot;&gt;k = n/4&lt;/script&gt;, so you always wanted the top
quarter of the list, then this would be &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n^2)&lt;/script&gt;, since &lt;script type=&quot;math/tex&quot;&gt;n/4 =
\mathcal{O}(n)&lt;/script&gt;. &lt;a href=&quot;#fnref:fnote_asymptotics&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_linked&quot;&gt;
      &lt;p&gt;I’m glossing over some details here - the numbers I quote above are for
a fixed-size array. So, if you build up an array by adding elements at the end, it
may seem like you get to just do a bunch of &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;.append&lt;/code&gt;s, but in
reality, you have to occasionally resize the array to make more space, which slows
things down to an average append time of &lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;. If you want a list-like
type where inserting elements is easy (&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(1)&lt;/script&gt;) but accessing elements is
difficult (&lt;script type=&quot;math/tex&quot;&gt;\mathcal{O}(n)&lt;/script&gt;), then you want a &lt;em&gt;linked list&lt;/em&gt;. Linked lists aren’t
as important for data scientists to use, so I won’t get into them much here. &lt;a href=&quot;#fnref:fnote_linked&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_array_hashmap&quot;&gt;
      &lt;p&gt;You might wonder why we would ever use an array over a hashmap
if hashmaps are strictly superior with respect to their complexity. It’s a good
question. The answer is that arrays take up less space (they don’t have to store the
keys, only the values) and they are much easier to work with in code (they look
cleaner, and are more intuitive for unordered data). Furthermore, if you had a
hashmap that linked integers &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt; to strings, and you wanted to change
the element at key &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, then you’d have to go through what is currently at keys
&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; through &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;, and increment their keys by one, so you would end up back at an
inefficient insertion algorithm like you have with arrays. &lt;a href=&quot;#fnref:fnote_array_hashmap&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_sort&quot;&gt;
      &lt;p&gt;This is true &lt;em&gt;on average&lt;/em&gt;; see the section below for a discussion of
average vs. worst-case complexity. &lt;a href=&quot;#fnref:fnote_sort&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_nosql&quot;&gt;
      &lt;p&gt;Non-relational database formats, like HBase and NoSQL, basically
function like giant hashmaps; they have a single “key”, and then the “value” can
contain arbitrary data - you don’t have to have certain columns in there. The
advantage of this is flexibility, but the disadvantage is that sorting and filtering
are slower because the database doesn’t have a pre-defined schema. &lt;a href=&quot;#fnref:fnote_nosql&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote_ansi&quot;&gt;
      &lt;p&gt;Technically, SQL is an ANSI Standard that many different dialects
implement - so, to call yourself a SQL dialect, you must have features defined by
this standard, like the &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clauses shown above. &lt;a href=&quot;#fnref:fnote_ansi&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">Part II of my guide to data science interviews, focusing on algorithms, data structures, and general programming knowledge and best practices.</summary></entry><entry><title type="html">DS Interview Study Guide Part I: Statistics</title><link href="http://localhost:4000/posts/2019/08/24/stats.html" rel="alternate" type="text/html" title="DS Interview Study Guide Part I: Statistics" /><published>2019-08-24T00:00:00+05:30</published><updated>2019-08-24T00:00:00+05:30</updated><id>http://localhost:4000/posts/2019/08/24/stats</id><content type="html" xml:base="http://localhost:4000/posts/2019/08/24/stats.html">&lt;p&gt;As I have gone through a couple rounds of interviews for data scientist
positions, I’ve been compiling notes on what I consider to be the essential
areas of knowledge. I want to make these notes available to the general public;
although there are many blog posts out there that are supposed to help one
prepare for data science interviews, I haven’t found any of them to be very
high-quality.&lt;/p&gt;

&lt;p&gt;From my perspective, there are four key subject areas that a data scientist
should feel comfortable with when going into an interview:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Statistics (including experimental design)&lt;/li&gt;
  &lt;li&gt;Machine Learning&lt;/li&gt;
  &lt;li&gt;Software Engineering (including SQL)&lt;/li&gt;
  &lt;li&gt;“Soft” Questions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to go through each of these individually. This first post will focus
on statistics. We will go over a number of topics in statistics in no particular
order. Note that &lt;strong&gt;this post will not teach you statistics; it will remind you
of what you should already know.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re utterly unfamiliar with the concepts I’m mentioning, I’d recommend &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/index.htm&quot;&gt;this
excellent MIT course on probability &amp;amp; statistics&lt;/a&gt; as a good starting point. When I
began interviewing, I had never taken a statistics class before; I worked through the
notes, homeworks, and exams for this course, and at the end had a solid foundation to
learn the specific things that you need to know for these interviews. In my studying, I
also frequently use &lt;a href=&quot;https://stats.stackexchange.com&quot;&gt;cross-validated&lt;/a&gt;, a website for asking and answering questions
about statistics. It’s good for in-depth discussions of subtle issues in
statistics. Finally, &lt;a href=&quot;https://www.goodreads.com/book/show/619590.Bayesian_Data_Analysis&quot;&gt;Gelman’s book&lt;/a&gt; is the classic in Bayesian inference. If you
have recommendations for good books that cover frequentist statistics in a clear manner,
I’d love to hear them.&lt;/p&gt;

&lt;p&gt;These are the notes that I put together in my studying, and I’m sure that there is
plenty of room for additions and corrections. I hope to improve this guide over time;
please let me know in the comments if there’s something you think should be added,
removed, or changed!&lt;/p&gt;

&lt;h1 id=&quot;the-central-limit-theorem&quot;&gt;The Central Limit Theorem&lt;/h1&gt;

&lt;p&gt;The Central Limit Theorem is a fundamental tool in statistical analysis. It states
(roughly) that when you add up a bunch of independent and identically distributed random
variables (with finite variance) then their sum will converge to a Gaussian
distribution.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;How is this idea useful to a data scientist? Well, one place where we see a sum of
random variables is in a &lt;em&gt;sample mean&lt;/em&gt;. One consequence of the central limit theorem is
that the sample mean of a variable with mean &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2&lt;/script&gt; will
itself have mean &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2/n&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is the number of
samples.&lt;/p&gt;

&lt;p&gt;I’d like to point out that this is pretty surprising. The distribution of the sum of two
random variables is not, in general, trivial to calculate. So it’s kind of awesome that,
if we’re adding up a large enough number of (independent and identically distributed)
random variables, then we &lt;em&gt;do&lt;/em&gt;, in fact, have a very easy expression for the
(approximate) distribution of the sum. Even better, we don’t need to know much of
anything about the distribution of we’re sampling from, besides its mean and
variance - it’s other moments, or general shape, don’t matter for the CLT.&lt;/p&gt;

&lt;p&gt;As we will see below, the simplification that the CLT introduces is the basis of one of
the fundamental hypothesis tests that data scientists perform: testing equality of
sample means. For now, let’s work through an example of the theorem itself.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;Suppose that we are sampling a Bernoulli random variable. This is a 0/1 random
variable that is 1 with probability &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; and 0 with probability &lt;script type=&quot;math/tex&quot;&gt;1-p&lt;/script&gt;. If we
get the sequence of ten draws &lt;script type=&quot;math/tex&quot;&gt;[0,1,1,0,0,0,1,0,1,0]&lt;/script&gt;, then our sample mean is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat \mu = \frac{1}{10}\sum_{i=1}^{10} x_i = 0.4&lt;/script&gt;

&lt;p&gt;Of course, this sample mean is itself a random variable - when we report it, we
would like to report an estimate on its variance as well. The central limit
theorem tells us that this will, as &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; increases, converge to a Gaussian
distribution. Since the mean of the Bernoulli random variable is &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; and its
variance is &lt;script type=&quot;math/tex&quot;&gt;p(1-p)&lt;/script&gt;, we know that the distribution of the sample mean will
converge to a Gaussian with mean &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;p(1-p)/n&lt;/script&gt;. So we could
say that our estimate of the parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is 0.4 &lt;script type=&quot;math/tex&quot;&gt;\pm&lt;/script&gt; 0.155. Of course,
we’re playing a bit loose here, since we’re using the estimate &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt; from
the data, as we don’t actually know the &lt;em&gt;true&lt;/em&gt; parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now, a sample size of &lt;script type=&quot;math/tex&quot;&gt;n=10&lt;/script&gt; is a bit small to be relying on a “large-&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;”
result like the CLT. Actually, in this case, we know the exact distribution of
the sample mean, since &lt;script type=&quot;math/tex&quot;&gt;\sum_i x_i&lt;/script&gt; is binomially distributed with parameters
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-questions-on-the-clt&quot;&gt;Other Questions on the CLT&lt;/h2&gt;

&lt;p&gt;I find that the CLT more comes up as a piece of context in other questions
rather than as something that gets asked about directly, but you should be
prepared to answer the following questions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What is the central limit theorem?&lt;/strong&gt; We’ve addressed this above - I doubt
they’ll be expecting a mathematically-correct statement of the theorem, but
you should know the gist of it, along with significant limitations (finite
variance being the major one).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;When can you &lt;em&gt;not&lt;/em&gt; use the CLT?&lt;/strong&gt; I think the key thing here is that you
have to be normalizing the data in an appropriate way (dividing by the sample
size), and that the underlying variance must be finite. The answer here can
get very subtle and mathematical, involving modes of convergence for random
variables and all that, but I doubt they will push you to go there, unless
you’re applying for a job specifically as a statistician.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Give me an example of the CLT in use.&lt;/strong&gt; The classic example here is the
distribution of the sample mean converging to a normal distribution as the
number of samples grows large.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hypothesis-testing&quot;&gt;Hypothesis Testing&lt;/h1&gt;

&lt;p&gt;Hypothesis testing (also known by the more verbose “null hypothesis significance
testing”) is a huge subject, both in scope and importance. We use statistics to
quantitatively answer questions based on data, and (for better or for worse) null
hypothesis significance testing is one of the primary methods by which we construct
these answers.&lt;/p&gt;

&lt;p&gt;I won’t cover the background of NHST here. It’s well-covered in the MIT course; look at
&lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/&quot;&gt;the readings&lt;/a&gt; to find the relevant sections. Instead of covering the background,
we’ll work through one exampleof a hypothesis test. It’s simple, but it comes up all the
time in practice, so it’s essential to know. I might go so far as to say that this is
the fundamental example of hypothesis testing in data science.&lt;/p&gt;

&lt;h2 id=&quot;an-example-1&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;Suppose we have two buttons, one green and one blue. We put them in front of
two different samples of users. For simplicity, let’s say that each sample has
size &lt;script type=&quot;math/tex&quot;&gt;n=100&lt;/script&gt;. We observe that &lt;script type=&quot;math/tex&quot;&gt;k_\text{green}&lt;/script&gt; 57 users click the green
button, and only &lt;script type=&quot;math/tex&quot;&gt;k_\text{blue} = 48&lt;/script&gt; click the blue button.&lt;/p&gt;

&lt;p&gt;Seems like the green button is better, right? Well, we want to be able to say
how &lt;em&gt;confident&lt;/em&gt; we are of this fact. We’ll do this in the language of null
hypothesis significance testing. As you should (hopefully) know, in order to do NHST, we
need a null hypothesis and a test statistic; we need to know the test statistic’s
distribution (under the null hypothesis); and we need to know the probability of
observing a value “at least as extreme” as the observed value according to this
distribution.&lt;/p&gt;

&lt;p&gt;I’m going to lay out a table of all the important factors here, and then discuss how we
use them to arrive at our &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Null Hypothesis&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
p_{blue} - p_{green} &lt; 0 %]]&gt;&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Test Statistic&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k_\text{blue}}{n} - \frac{k_\text{green}}{n}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Test Statistic’s Distribution&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;N(0, (p_b(1-p_b) + p_g(1-p_g)) / n)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Test Statistic’s Observed Value&lt;/td&gt;
      &lt;td&gt;-0.09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value&lt;/td&gt;
      &lt;td&gt;0.1003&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There are a few noteworthy things here. First, we really want to know whether
&lt;script type=&quot;math/tex&quot;&gt;p_g &gt; p_b&lt;/script&gt;, but that’s equivalent to &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
p_b-p_g &lt; 0 %]]&gt;&lt;/script&gt;. Second, we assume that
&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is large enough so that &lt;script type=&quot;math/tex&quot;&gt;k/n&lt;/script&gt; is approximately normally distributed,
with mean &lt;script type=&quot;math/tex&quot;&gt;\mu = p&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2 = p(1-p)/n&lt;/script&gt;. Third, since the
differences of two normals is itself a normal, the test statistic’s distribution
is (under the null hypothesis) a normal with mean zero and the variance given
(which is the sum of the two variances of &lt;script type=&quot;math/tex&quot;&gt;k_b/n&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;k_g/n&lt;/script&gt;).&lt;/p&gt;

&lt;p&gt;Finally, we don’t actually know &lt;script type=&quot;math/tex&quot;&gt;p_b&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;p_g&lt;/script&gt;, so we can’t really compute
the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value; what we do is we say that &lt;script type=&quot;math/tex&quot;&gt;k_b/n&lt;/script&gt; is “close enough”” to
&lt;script type=&quot;math/tex&quot;&gt;p_b&lt;/script&gt; and use it as an approximation. That gives us our final &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value.&lt;/p&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value was calculated in Python, as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.stats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.48&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.57&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 0.10034431272089045&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Calculating the CDF of a normal at &lt;script type=&quot;math/tex&quot;&gt;x=-0.09&lt;/script&gt; tells us the probability that the test
statistic is less than or equal to &lt;script type=&quot;math/tex&quot;&gt;-0.09&lt;/script&gt;, which is to say the probability that our
test statistic is at least as extreme as the observed value. This probability is
precisely our &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value.&lt;/p&gt;

&lt;p&gt;So what’s the conclusion? Well, often times a significance level is set before the test
is performed; if the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value is not below this threshold, then the null hypothesis
is not rejected. Suppose we had set a significance level of 0.05 before the test began -
then, with this data, we would not be able to reject the null hypothesis, which is that
the buttons are equally appealing to users.&lt;/p&gt;

&lt;p&gt;Phew! I went through that pretty quick, but if you can’t follow the gist of what
I was doing there, I’d recommend you think through it until it is clear to
you. You will be faced with more complicated situations in practice; it’s
important that you begin by understanding the most simple situation inside out.&lt;/p&gt;

&lt;h2 id=&quot;other-topics-in-hypothesis-testing&quot;&gt;Other Topics in Hypothesis Testing&lt;/h2&gt;

&lt;p&gt;Some important follow-up questions you should be able to answer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What are Type I &amp;amp; II error? What is a situation where you would be more concerned
with Type I error? Vice versa?&lt;/strong&gt; These are discussed &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#Type_I_error&quot;&gt;on Wikipedia&lt;/a&gt;. Type I error
is false-positive error. You might be very concerned with Type I error if you are
interviewing job candidates; it is very costly to hire the wrong person for the job,
so you really want to avoid false positives. Type II error is false-negative error. If
you are testing for a disease that is deadly but has a simple cure, then you would
certainly NOT want to have a false negative result of the test, since that would
result in an easily-avoidable negative outcome.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What is the &lt;em&gt;power&lt;/em&gt; of a test? How do you calculate it?&lt;/strong&gt; The power of a test is the
probability that you will reject the null hypothesis, given an alternative
hypothesis. Therefore, to calculate the power, you need an alternative hypothesis; in
the example above, this would look like &lt;script type=&quot;math/tex&quot;&gt;p_b-p_g = -0.1&lt;/script&gt;. Although these alternative
hypothesis are often somewhat ad-hoc, the power analysis depends critically upon
them. Google will turn up plenty of videos and tutorials on calculating the power of a
test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What is the significance of a test?&lt;/strong&gt; This is the same as the
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value threshold below which we reject the null
hypothesis. (In)famously, 0.05 has become the de-facto standard throughout
many sciences for significance levels worthy of publication.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gow would you explain a p-value to a lay person&lt;/strong&gt;? Of course, you should
have a solid understanding of the statistical definition of the
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value. A generally accepted answer is “a &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value quantifies the
evidence for a hypothesis - closer to zero means more evidence.” Of course,
this is wrong on a lot of levels - it’s actually quantifying evidence
&lt;em&gt;against&lt;/em&gt; the null hypothesis, not &lt;em&gt;for&lt;/em&gt; the alternative. For what it’s
worth, I’m not convinced there’s a great answer to that one; it’s an
inherently technical quantity that is frequently misrepresented and abused by
people trying to (falsely) simplify its meaning.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If you measure many different test statistics, and get a &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value for each (all
based on the same null hypothesis), how do you combine them to get an aggregate
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value?&lt;/strong&gt; This one is more of a bonus question, but it’s worth knowing. It’s
actually not obvious how do to this, and the true &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value depends on how the tests
depend on each other. However, you can get an upper-bound (worst-case estimate) on the
aggregate &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value by adding together the different &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-values. The validity of
this bound results from the inclusion-exclusion principle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;confidence-intervals&quot;&gt;Confidence Intervals&lt;/h1&gt;

&lt;p&gt;Confidence intervals allow us to state a statistical result as a range, rather than a
single value. If we count that 150 out of 400 people sample randomly from a city
identify themselves as male, then our best estimate of the fraction of women in the city
is 250/400, or 5/8. But we only looked at 400 people, so it’s reasonable to expect that
the true value might be a bit more or less than 5/8. Confidence intervals allow us to
quantify this width in a statistically rigorous way.&lt;/p&gt;

&lt;p&gt;As per usual, we won’t actually introduce the concepts here - I’ll refer you to the
&lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/&quot;&gt;readings from the MIT course&lt;/a&gt; for an introduction. We’ll focus on working through
an example, and looking at some different approaches.&lt;/p&gt;

&lt;h2 id=&quot;the-exact-method&quot;&gt;The Exact Method&lt;/h2&gt;

&lt;p&gt;Suppose that we want to find a 95% confidence inverval on the female fraction in the
city discussed above. This corresponds to a significance level of &lt;script type=&quot;math/tex&quot;&gt;\alpha/2&lt;/script&gt;. One way
to get the &lt;strong&gt;exact confidence inverval&lt;/strong&gt; is to use the CDF of our test statistic, but
substitute in the observed parameter for the true parameter, and then invert it to find
where it hits &lt;script type=&quot;math/tex&quot;&gt;\alpha/2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;1-\alpha/2&lt;/script&gt;. That is, we need to find the value
&lt;script type=&quot;math/tex&quot;&gt;p_l&lt;/script&gt; that solves the equation&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;CDF\left(n, p_l\right) = \alpha/2&lt;/script&gt;

&lt;p&gt;and the value &lt;script type=&quot;math/tex&quot;&gt;p_u&lt;/script&gt; that solves the equation&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;CDF\left(n, p_u\right) = 1 - \alpha/2.&lt;/script&gt;

&lt;p&gt;In these, &lt;script type=&quot;math/tex&quot;&gt;CDF(n,p)&lt;/script&gt; is the cumulative distribution function of our test statistic,
assuming that the true value of &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is in fact the observed value &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt;. This is
a bit confusing, so it’s worth clarifying. In our case, the sample statistic is the
sample mean of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; binomial random variables, so this CDF is the CDF of the sample
mean of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; binomial random variables with parameter &lt;script type=&quot;math/tex&quot;&gt;5/8&lt;/script&gt;. Solving the two
equations above would give us our confidence inverval &lt;script type=&quot;math/tex&quot;&gt;[p_l, p_u]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;It took me a bit of work to see that solving the above two equations would in fact give
us bounds that satisfy the definitions of a &lt;script type=&quot;math/tex&quot;&gt;1-\alpha&lt;/script&gt; confidence interval, which says
that, were we to run many experiments, we would find that the true value of &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; would
fall between &lt;script type=&quot;math/tex&quot;&gt;p_l&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_u&lt;/script&gt; with the probability&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P\left(p_l\leq p \leq p_u\right) = 1-\alpha.&lt;/script&gt;

&lt;p&gt;If you’re into this sort of thing, I’d suggest you take some time thinking through why
inverting the CDF as above guarantees bounds &lt;script type=&quot;math/tex&quot;&gt;[p_l, p_u]&lt;/script&gt; that solve the above
equaiton.&lt;/p&gt;

&lt;p&gt;Although it is useful for theoretical analysis, I rarely use this method in
practice, because I often do not actually know the true CDF of the statistic
I am measuring. Sometimes I do know the true CDF, but even in such cases, the
next (approximate) method is generally sufficient.&lt;/p&gt;

&lt;h2 id=&quot;the-approximate-method&quot;&gt;The Approximate Method&lt;/h2&gt;

&lt;p&gt;If your statistic can be phrased as a sum, then its distribution approaches a normal
distribution.&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; This means that you can solve the above equations for a normal
CDF rather than the true CDF of the sum (in the case above, a binomial CDF).&lt;/p&gt;

&lt;p&gt;How does this help? For a normal distribution, the solutions for the above equations to
find lower and upper bounds are well known. In particular, the inverval
&lt;script type=&quot;math/tex&quot;&gt;[\mu-\sigma,\mu+\sigma]&lt;/script&gt;, also called a &lt;script type=&quot;math/tex&quot;&gt;1\sigma&lt;/script&gt;-interval, covers about 68% of the
mass (probability) of the normal PDF, so if we wanted to find a confidence interval of
level &lt;script type=&quot;math/tex&quot;&gt;0.68&lt;/script&gt;, then we know to use the bounds &lt;script type=&quot;math/tex&quot;&gt;(\overline x-\sigma, \overline
x+\sigma)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;\overline x&lt;/script&gt; is our estimate of the true mean &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;This sort of result is very powerful, because it saves us from having to do any
inversion by hand. A table below indicates the probability mass contained in various
symmetric intervals on a normal distribution:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Inverval&lt;/th&gt;
      &lt;th&gt;Width&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
      &lt;th&gt;Coverage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;[\mu-\sigma,\mu+\sigma]&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1\sigma&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;0.683&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;[\mu-2\sigma,\mu+2\sigma]&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2\sigma&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;0.954&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;[\mu-3\sigma,\mu+3\sigma]&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;3\sigma&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;0.997&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let’s think through how we would use this in the above example, where we give a
confidence interval on our estimate of the binomial parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;A binomial distribution has mean &lt;script type=&quot;math/tex&quot;&gt;\mu=np&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2=np(1-p)&lt;/script&gt;. Since
the sample statistical &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt; is just the binomial divided by &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, it has mean
&lt;script type=&quot;math/tex&quot;&gt;\mu=p&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2 = p(1-p)/n&lt;/script&gt;. The central limit theorem tells us that
the distribution of &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt; will converge to a normal with just these parameters.&lt;/p&gt;

&lt;p&gt;Suppose we want an (approximate) 95% confidence interval on the percentage of women in
the population of our city; the table above tells us we can just do a two-sigma
interval. (This is not &lt;em&gt;exactly&lt;/em&gt; a 95% confidence interval; it’s a bit over, as we see
in the table above). The parameter &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt; has mean &lt;script type=&quot;math/tex&quot;&gt;\mu= p&lt;/script&gt; and variance
&lt;script type=&quot;math/tex&quot;&gt;\sigma^2 = p(1-p)/n&lt;/script&gt;.&lt;sup id=&quot;fnref:fnote4&quot;&gt;&lt;a href=&quot;#fn:fnote4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; In our case, &lt;script type=&quot;math/tex&quot;&gt;\hat p=5/8&lt;/script&gt;, so our confidence
interval is &lt;script type=&quot;math/tex&quot;&gt;5/8 \pm 15/1280 \approx 0.625 \pm 0.0117&lt;/script&gt;. Note that we approximated
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; with our experimental value &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt;; the theoretical framework that allows us
to do this substitution is beyond the scope of this article, but is nicely covered in
the MIT readings (Reading 22, in particular).&lt;/p&gt;

&lt;h2 id=&quot;the-bootstrap-method&quot;&gt;The Bootstrap Method&lt;/h2&gt;

&lt;p&gt;The previous approach relies on the accuracy of approximating our statistic’s
distribution by a normal distribution. Bootstrapping is a pragmatic, flexible
approach to calculating confidence intervals, which makes no assumptions on the
underlying statistics we are calculating. We’ll go into more detail on
bootstrapping in general below, so we’ll be pretty brief here.&lt;/p&gt;

&lt;p&gt;The basic idea is to repeatedly pull 400 samples &lt;em&gt;with replacement&lt;/em&gt; from the sampled
data. For each set of 400 samples, we get an estimate &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt;, and thus can build an
empirical distribution on &lt;script type=&quot;math/tex&quot;&gt;\hat p&lt;/script&gt;. Of course, the CLT indicates that this empirical
distribution should look a lot like a gaussian distribution with mean &lt;script type=&quot;math/tex&quot;&gt;\mu= p&lt;/script&gt; and variance
&lt;script type=&quot;math/tex&quot;&gt;\sigma^2 = p(1-p)/n&lt;/script&gt;..&lt;/p&gt;

&lt;p&gt;Once you have bootstrapped an empirical distribution for your statistic of interest (in
the example above, this is the percentage of the population that is women), then you can
simply find the &lt;script type=&quot;math/tex&quot;&gt;\alpha/2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;1-\alpha/2&lt;/script&gt; percentiles, which then become your
confidence interval. Although in this case our empirical distribution is (approximately)
normal, it’s worth realizing that we can reasonably calculate percentiles &lt;em&gt;regardless&lt;/em&gt;
of what the empirical distribution is; this is why bootstrapping confidence intervals
are so flexible.&lt;/p&gt;

&lt;p&gt;As you’ll see below, the downside of bootstrapping confidence intervals is that
it requires some computation. The amount of computation required can be
anywhere from trivial to daunting, depending on how many samples you want in
your empirical distribution. Another downside is that their statistical interpretation
is not exactly in alignment with the definition of a confidence interval, but I’ll leave
the consideration of that as an exercise for the reader.&lt;sup id=&quot;fnref:fnotez&quot;&gt;&lt;a href=&quot;#fn:fnotez&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading24.pdf&quot;&gt;One of the MIT
readings&lt;/a&gt; has an in-dpeth discussion of confidence intervals generated via the
bootstrap method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overall, I would recommend using the approximate method when you have good reason to
believe your sample statistic is approximately normal, or bootstrapping otherwise.&lt;/strong&gt; Of
course, the central limit theorem can provide some guarantees about the asympototic
distribution of certain statistics, so it’s worth thinking through whether that applies
to your situations.&lt;/p&gt;

&lt;h2 id=&quot;other-topics-in-confidence-intervals&quot;&gt;Other Topics in Confidence Intervals&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What is the definition of a confidence interval?&lt;/strong&gt; This is a bit more technical, but
it’s essential to know that it is &lt;strong&gt;not&lt;/strong&gt; “there is a 95% probability that the true
parameter is in this range.” Actually, what it means is that “if you reran the
experiment many times, then 95% of the time, the true value of the parameter you’re
estimating would fall in this range.” It’s worth noting that the &lt;em&gt;range&lt;/em&gt; is the random
variable here - the parameter itself (the true percentage of the population that
identifies as female, in our example) is fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How would this change if you wanted a &lt;em&gt;one-sided&lt;/em&gt; confidence interval?&lt;/strong&gt;
This one isn’t too bad - you just solve either &lt;script type=&quot;math/tex&quot;&gt;CDF(n,p_l) = \alpha&lt;/script&gt; or
&lt;script type=&quot;math/tex&quot;&gt;CDF(n,p_u) = 1-\alpha&lt;/script&gt; for a lower- or upper-bounded interval,
respectively.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What is the relationship between confidence intervals and hypothesis testing?&lt;/strong&gt;
There are many ways to answer this question; it’s a good one to ponder in order to get
a deeper understanding of the two topics. One connection is the relationship between
confidence intervals and rejection regions in NHST - Reading 22 in the MIT course
addresses this one nicely.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/h1&gt;

&lt;p&gt;Bootstrapping is a technique that allows you to get insight into the quality of your
estimates, based only on the data you have. It’s a key tool in a data scientist’s
toolbag, because we frequently don’t have a clear theoretical understanding of our
statistics, and yet we want to provide uncertainty estimates. To understand how it
works, let’s look through an example.&lt;/p&gt;

&lt;p&gt;In the last section, we sampled 400 people in an effort to understand what percentage of
a city’s population identified as female. Since 250 of them identified themselves as
female, our estimate of the raio for the total population is &lt;script type=&quot;math/tex&quot;&gt;5/8&lt;/script&gt;. This estimate it
itself a random variable; if we had sampled different people, we might have ended up
with a different number. What if we want to know the distribution of this estimate? How
would we go about getting that?&lt;/p&gt;

&lt;p&gt;Well, the obvious way is to go out and sample 400 more people, and repeat this over and
over again, until we have many such fractional estimates. But what if we don’t have
access to sampling more people? The natural thing is to think that we’re out of luck -
without the ability to sample further, we can’t actually understand more about the
distribution of our parameter (ignoring, for the moment, that we have lots of
theoretical knowledge about it via the CLT).&lt;/p&gt;

&lt;p&gt;The idea behind bootstrapping is simple. Sample from the data you already have, with
replacement, a new sample of 400 people. This will give you an estimate of the female
fraction that is distinct from your original estimate, due to the replacement in your
sampling. You can repeat this process as many times as you like; you will then get an
empirical distribution whic approaches the true distribution of the statistic.&lt;sup id=&quot;fnref:fnote4:1&quot;&gt;&lt;a href=&quot;#fn:fnote4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Bootstrapping has the advantage of belig flexible, although it does have its
limitations. Rather than get too far into the weeds, I’ll just point you to the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bootstrapping_(statistics)&quot;&gt;Wikipedia article on bootstrapping&lt;/a&gt;. There are also tons of resources about this
subject online. Try coding it up for yourself! By the time you’re interviewing, you
should be able to write a bootstrapping algorithm quite easily.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://machinelearningmastery.com/a-gentle-introduction-to-the-bootstrap-method/&quot;&gt;Machine Learning Mastery&lt;/a&gt; has a good introduction to bootstrapping that uses the
scikit-learn API. &lt;a href=&quot;https://towardsdatascience.com/an-introduction-to-the-bootstrap-method-58bcb51b4d60&quot;&gt;Towards Data Science&lt;/a&gt; codes it up directly in NumPy, which is a
useful thing to know how to be able to do. Asking someone to code up a bootstrapping
function would be an entirely reasonable interview questions, so it’s something you
should be comfortable doing.&lt;/p&gt;

&lt;h2 id=&quot;other-topics-in-bootstrapping&quot;&gt;Other Topics in Bootstrapping&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;When would you &lt;em&gt;not&lt;/em&gt; want to use bootstrapping?&lt;/strong&gt; It might not be feasible when it
is very costly to calculate your sample statistic. To get accurate estimates you’ll
need to calculate your statistic thousands of times, so it might not be feasible if it
takes minutes or hours to calculate a single sample. Also, it is often difficult to
get strong theoretical guarantees about probabilities based on bootstrapping, so if
you need a highly statistically rigorous approach, you might be better served with
something more analytical. Finally, if you know the distribution of your statistic
already (for example, you know from the CLT that it is normally distributed) then you
can get better (more accurate) uncertainty estimates from an analytical approach.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linear-regression&quot;&gt;Linear Regression&lt;/h1&gt;

&lt;p&gt;Regression is the study of the relationship between variables; for example, we
might wish to know how the weight of a person relates to their height. &lt;em&gt;Linear&lt;/em&gt;
regression assumes that your input (height, or &lt;script type=&quot;math/tex&quot;&gt;h&lt;/script&gt;) and output (weight, or
&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;) variables are &lt;em&gt;linearly related&lt;/em&gt;, with slope &lt;script type=&quot;math/tex&quot;&gt;\beta_1&lt;/script&gt;, intercept
&lt;script type=&quot;math/tex&quot;&gt;\beta_0&lt;/script&gt;, and noise &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w = \beta_1\cdot h + \beta_0 + \epsilon.&lt;/script&gt;

&lt;p&gt;A linear regression analysis helps the user discover the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s in the
above equation. This is just the simplest application of LR; in reality, it is
quite flexible and can be used in a number of scenarios.&lt;/p&gt;

&lt;p&gt;Linear regression is another large topic that I can’t really do justice to in this
article. Instead, I’ll just go through some of the common topics, and introduce the
questions you should be able to address. As is the case with most of these topics, you
can look at the &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/index.htm&quot;&gt;MIT Statistics &amp;amp; Probability course&lt;/a&gt; for a solid academic
introduction to the subject. You can also dig through &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression&quot;&gt;the Wikipedia article&lt;/a&gt; to get
a more in-depth picture. The subject is so huge, and there’s so much to learn about it,
that you really can spend as much time as you want digging into it - I’m just going to
gesture at some of the simpler aspects of it.&lt;/p&gt;

&lt;h2 id=&quot;calculating-a-linear-regression&quot;&gt;Calculating a Linear Regression&lt;/h2&gt;

&lt;p&gt;Rather than go through an example here, I’ll just refer you to the many available guides
that show you how to do this in code. Of course, you could do it in raw NumPy, solving
the normal equations explicitly, but I’d recommend using scikit-learn or statsmodels, as
they have much nicer interfaces, and give you all sorts of additional information about
your model (&lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value, etc.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://realpython.com/linear-regression-in-python/&quot;&gt;Real Python&lt;/a&gt; has a good guide to coding this up - see the section “Simple Linear
Regression with scikit-learn.” &lt;a href=&quot;https://www.geeksforgeeks.org/linear-regression-python-implementation/&quot;&gt;GeeksForGeeks&lt;/a&gt; does the solution in raw NumPy; the
equations won’t be meaningful for you until you read up on the normal equation and how
to analytically solve for the optimal LR coefficients. If you want something similar in
R, or Julia, or MATLAB,&lt;sup id=&quot;fnref:fnoted&quot;&gt;&lt;a href=&quot;#fn:fnoted&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; then I’m sure it’s out there, you’ll just have to go do
some Googling to find it.&lt;/p&gt;

&lt;h2 id=&quot;a-statistical-view&quot;&gt;A Statistical View&lt;/h2&gt;

&lt;p&gt;This subject straddles the boundary between statistics and machine-learning. It has been
quite thoroughly studied from a statistical point of view, and there are some iportant
results that you should be familiar with when thinking about linear regression from a
statistical frame.&lt;sup id=&quot;fnref:fnotec&quot;&gt;&lt;a href=&quot;#fn:fnotec&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let’s look back at our foundational model for linear regression. LR assumes
that your input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and output &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; are related via&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y_i = \beta_1\cdot x_i + \beta_0 + \epsilon_i,&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\epsilon_i&lt;/script&gt; are i.i.d., distributed as &lt;script type=&quot;math/tex&quot;&gt;N(0, \sigma^2)&lt;/script&gt;. Since the
&lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; are random variables, the &lt;script type=&quot;math/tex&quot;&gt;\beta_j&lt;/script&gt; are themselves random
variables. One important question is whether there is, in fact, any
relationship between our variables at all. If there is not, then we should
&lt;script type=&quot;math/tex&quot;&gt;\beta_1&lt;/script&gt; close to 0,&lt;sup id=&quot;fnref:fnoteb&quot;&gt;&lt;a href=&quot;#fn:fnoteb&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; but they will not ever be exactly zero. One important
statistical technique in LR is &lt;strong&gt;doing a hypothesis test against the null
hypothesis that &lt;script type=&quot;math/tex&quot;&gt;\beta_1 = 0&lt;/script&gt;&lt;/strong&gt;. When a package like scikit-learn returns a
“&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value of the regression”, this is the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value they are talking
about.&lt;/p&gt;

&lt;p&gt;Like I said before, there is a lot more to know about the statistics of linear
regression than just what I’ve said here. You can learn more about the statistics of LR
by looking at the &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading25.pdf&quot;&gt;MIT course notes on the subject&lt;/a&gt;, or by digging through your
favorite undergraduate statistics book - most of them should have sections covering it.&lt;/p&gt;

&lt;h2 id=&quot;validating-your-model&quot;&gt;Validating Your Model&lt;/h2&gt;

&lt;p&gt;Once you’ve calculated your LR, you’d like to validate it. This is very important to
do - if you’re asked to calculate a linear regression in an interview, you should always
go through the process of validating it after you’ve done the calculation.&lt;/p&gt;

&lt;p&gt;I’d generally go through the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If it’s just a simple (one independent variable) linear regression, then plot the two
variables. This should give you a good sense of whether it’s a good idea to use linear
regression in the first place. If you have multiple independent variables, you can
make separate plots for each one.&lt;/li&gt;
  &lt;li&gt;Look at your &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt; value. Is it reasonably large? Remember, closer to 1 is
better. If it’s small, then doing a linear regression hasn’t helped much.&lt;/li&gt;
  &lt;li&gt;You can look at the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value to see if it’s difference from zero is
statistically significant (see the section below). Also, you can have a very
significant &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value while still having a low &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt;, so be cautious in your
interpretation of this one.&lt;/li&gt;
  &lt;li&gt;You can also look at the RMSE of your model, but this number is not scaled between 0
and 1, so a “good” RMSE is highly dependent on the units of your indepedent variable.&lt;/li&gt;
  &lt;li&gt;Plot your residuals, for each variable. The residual is just the input minus
the value predicted by your model, a.k.a. the error of your model. Plotting
each residual isn’t really feasible if you have hundreds of independent
variables, but it’s a good idea if your data is small enough. You should be
looking for “homoskedasticity” - that the variance of the error is uniform
across the range of the independent variable. If it’s not, then certain
things you’ve calculated (for example, the &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value of your regression)
are no longer valid. You might also see that your errors have a bias that
changes as the &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt; changes; this means that there’s some more complicated
relationship between &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt; that your regression did not pick up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the questions below address the assumptions of linear regression; you
should be familiar with them, and now how to test for them either before or
after the regression is performed, so that you can be confident that your model
is valid.&lt;/p&gt;

&lt;h2 id=&quot;basic-questions-on-lr&quot;&gt;Basic Questions on LR&lt;/h2&gt;

&lt;p&gt;Hopefully you’ve familiarized yourself with the basic ideas behind linear
regression. Here are some conceptual questions you should be able to answer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How are the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s calculated?&lt;/strong&gt; Practically, you let the library
you’re using take care of this. But behind the scenes, generally it’s solving
the so-called “normal equations”, which give you the optimal (highest
&lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt;) parameters possible.  You can use gradient descent to approximate
the optimal solution when the design matrix is too large to invert; this is
available via the &lt;code class=&quot;highlighter-rouge&quot;&gt;SGDRegressor&lt;/code&gt; model in scikit-learn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How do you decide if you should use linear regression?&lt;/strong&gt; The best case is
when the data is 2- or 3-dimensional; then you can just plot the data and see
if it looks like “linear plus noise”. However, if you have lots of
independent variables, this isn’t really an option. In such a case, you
should look perform a linear regression analysis, and then look at the errors
to verify that they look normally distributed and homoskedastic (constant
variance).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What does the &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt; value of a regression indicate?&lt;/strong&gt; The &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt; value
indicates “how much of the variance of the output data is explained by the
regression.” That is, your output data &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; has some (sample) variance, just
on its own. Once you discover the linear relationship and subtract it off,
then the remaining error &lt;script type=&quot;math/tex&quot;&gt;y - \beta_0 - \beta_1x&lt;/script&gt; still has some variance,
but hopefully it’s lower - &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt; is one minus the ratio of the original to
the remaining variance. When &lt;script type=&quot;math/tex&quot;&gt;r^2=1&lt;/script&gt;, then your line is a perfect fit of
the data, and there is no remaining error. It is often used to explain the
“quality” of your fit, although this can be a bit treacherous - see
&lt;a href=&quot;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&quot;&gt;Anscombe’s Quartet&lt;/a&gt; for examples of very different situations with the
same &lt;script type=&quot;math/tex&quot;&gt;r^2&lt;/script&gt; value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What are the assumptions you make when doing a linear regression?&lt;/strong&gt; The
Wikipedia article &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_regression#Assumptions&quot;&gt;addresses this point&lt;/a&gt; quite thoroughly. This is worth
knowing, because you don’t just want to jump in and blindly do LR; you want
to be sure it’s actually a reasonable approach.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;When is it a bad idea to do LR?&lt;/strong&gt; When you do linear regression, you’re assuming a
certain relationship between your variables. Just the parameters and output of your
regression won’t tell you whether the data really are appropriate for a linear
model. &lt;a href=&quot;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&quot;&gt;Anscombe’s Quartet&lt;/a&gt; is a particularly striking example of how the output of
a linear regression analysis can look similar but in fact the quality of the analysis
can be radically different. Beyond this, it is a bad idea to do LR whenever the
assumptions of LR are violated by the data; see the above bullet for more info there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Can you do linear regression on a nonlinear relationship?&lt;/strong&gt; In many cases,
yes. What we need is for the model to be linear in the parameters &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;;
if, for example, you are comparing distance and time for a constantly
accelerating object &lt;script type=&quot;math/tex&quot;&gt;d = 1/2at^2&lt;/script&gt;, and you want to do regression to
discover the acceleration &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, then you can just use &lt;script type=&quot;math/tex&quot;&gt;t^2&lt;/script&gt; as your
independent variable. The model relating &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t^2&lt;/script&gt; is linear in the
acceleration &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;, as required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What does the “linear” in linear regression refer to?&lt;/strong&gt; This one might seem
trivial, but it’s a bit of a trick question; the relationship &lt;script type=&quot;math/tex&quot;&gt;y =
2\log(x)&lt;/script&gt; might not appear linear, but in fact it can be obtained via a
linear regression, by using &lt;script type=&quot;math/tex&quot;&gt;\log(x)&lt;/script&gt; as the input variables, rather than
&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. Of course, for this to work, you need to know ahead of time that you
want to compare against &lt;script type=&quot;math/tex&quot;&gt;\log(x)&lt;/script&gt;, but this can be discovered via
trial-and-error, to some extent. So the “linear” &lt;em&gt;does&lt;/em&gt;, as you’d expect,
mean that the relationship between independent and dependent variable is
linear, but you can always &lt;em&gt;change&lt;/em&gt; either of them and re-calculate your
regression.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handling-overfitting&quot;&gt;Handling Overfitting&lt;/h2&gt;

&lt;p&gt;Overfitting is a very important to understand, and is a fundamental challenge in machine
learning and modeling. I’m not going to go into great detail on it here; more
information will be presented in the machine learning section of the guide. There are
some techniques for handling it that are particular to LR, which is what I’ll talk about
here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://realpython.com/linear-regression-in-python/&quot;&gt;RealPython&lt;/a&gt; has good images showing examples of over-fitting. You can
handle it by building into your model a “penalty” on the &lt;script type=&quot;math/tex&quot;&gt;\beta_i&lt;/script&gt;s; that is,
tell your model “I want low error, &lt;strong&gt;and&lt;/strong&gt; I don’t want large coefficients.**
The balance of these preferences is determined by a parameter, often denoted by
&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Since you have many &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s, in general, you have to combine them in some
fashion. Two such ways to calculate the measure of “overall badness” (which I’ll call
&lt;script type=&quot;math/tex&quot;&gt;OB&lt;/script&gt;) are&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;OB = \sqrt{ \beta_1^2 + \beta_2^2 + \ldots + \beta_n^2 }&lt;/script&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;OB = |\beta_1| + |\beta_2| + \ldots + |\beta_n|.&lt;/script&gt;

&lt;p&gt;The first will tend to be emphasize outliers; that is, it is more sensitive to
single large &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s. The second considers all the &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s more
uniformly. If you use the first, it is called “ridge regression”, and if you
use the second it is called “LASSO regression.”&lt;/p&gt;

&lt;p&gt;In mathematics, these denote the &lt;script type=&quot;math/tex&quot;&gt;\ell_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\ell_2&lt;/script&gt; norms of the vectors
of &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s; you can in theory use &lt;script type=&quot;math/tex&quot;&gt;\ell_p&lt;/script&gt; norms for any &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;, even
&lt;script type=&quot;math/tex&quot;&gt;p=0&lt;/script&gt; (count the number of non-zero &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;s to get the overall badness) or
&lt;script type=&quot;math/tex&quot;&gt;p=\infty&lt;/script&gt; (take the largest &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; as the overall badness). However, in
practice, LASSO and ridge regression are already implemented in common
packages, so it’s easy to use them right out of the box.&lt;/p&gt;

&lt;p&gt;As usual, there is a LOT to learn about how LASSO and ridge regression change your
output, and what kinds of problems they can address (and/or create). I’d highly
recommend searching around the internet to learn more about them if you aren’t already
confident in your understanding of how they work.&lt;/p&gt;

&lt;h2 id=&quot;logistic-regression&quot;&gt;Logistic Regression&lt;/h2&gt;

&lt;p&gt;Logistic regression is a way of modifying linear regression models to get a
classification model. The statistics of logistic regression are, generally speaking, not
as clean as those of linear regression. It will be covered in the machine learning
section, so we won’t discuss it here.&lt;/p&gt;

&lt;h1 id=&quot;bayesian-inference&quot;&gt;Bayesian Inference&lt;/h1&gt;

&lt;p&gt;Up until now this guide has primarily focused on frequentist topics in
statistics, such as hypothesis testing and the frequentist approach to
confidence intervals. There is an entire world of Bayesian statistical
inference, which differs significantly from the frequentist approach in both
philosophy and technique. I will only touch on the most basic application of
Bayesian reasoning in this guide.&lt;/p&gt;

&lt;p&gt;In this section, I will mostly defer to outside sources, who I think speak more
eloquently on the topic than I can. Some companies (such as Google, or so I’m told) tend
to focus on advanced Bayesian skills in their data science interviews; if you want to
really learn the Bayesian approach, I’d reccomend &lt;a href=&quot;https://www.goodreads.com/book/show/619590.Bayesian_Data_Analysis&quot;&gt;Gelman’s book&lt;/a&gt;, which is a
classic in the field.&lt;/p&gt;

&lt;h2 id=&quot;bayesian-vs-frequentist-statistics&quot;&gt;Bayesian vs Frequentist Statistics&lt;/h2&gt;

&lt;p&gt;It’s worth being able to clearly discuss the difference in philosophy and approach
between the two schools of statistics. I particularly like the discussion in the MIT
course notes. They state, more or less, that while the Bayesians like to reason from
Bayes theorem&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(H|D) = \frac{ P(D|H)P(H)}{P(D)},&lt;/script&gt;

&lt;p&gt;the frequentist school thinks that “the probability of the hypothesis” is a nonsense
concept - it is not a well-founded probablistic value, in the sense that there is no
repeatable experiment you can run in which to gather relative frequency counts and
calculate probabilities. Therefore, the frequentists must reason directly from
&lt;script type=&quot;math/tex&quot;&gt;P(D|H)&lt;/script&gt;, the probability of the data given the hypothesis, which is just the
&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;-value. The upside of this is that the probabilistic interpretation of &lt;script type=&quot;math/tex&quot;&gt;P(D|H)&lt;/script&gt;
is clean and unambiguous; the downside is that it is easy to misunderstand, since what
we really think we want is “the probability that the hypothesis is true.”&lt;/p&gt;

&lt;p&gt;If you want to know more about this, there are endless discussions of it all over the
internet. Like many such dichotomies (emacs vs. vim, overhand vs underhand toilet paper,
etc.) it is generally overblown - a working statistician should be familiar with, and
comfortable using, both frequentist &lt;em&gt;and&lt;/em&gt; Bayesian techniques in their analysis.&lt;/p&gt;

&lt;h2 id=&quot;basics-of-bayes-theorem&quot;&gt;Basics of Bayes Theorem&lt;/h2&gt;

&lt;p&gt;Bayes theorem tells us how to update our belief in light of new evidence. You
should be comfortably applying Bayes theorem in order to answer basic
probability questions. The classic example is the “base rate fallacy”:&lt;/p&gt;

&lt;p&gt;Consider a routine screening test for a disease. Suppose the frequency of the
disease in the population (base rate) is 0.5%. The test is highly accurate with
a 5% false positive rate and a 10% false negative rate. You take the test and
it comes back positive. What is the probability that you have the disease?&lt;/p&gt;

&lt;p&gt;The answer is NOT 0.95, even though the test has a 5% false positive rate. You should be
able to clearly work through this problem, building probability tables and using Bayes
theorem to calculate the final answer. The problem is worked through in the &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading3.pdf&quot;&gt;MIT stats
course readings&lt;/a&gt; (see Example 10), so I’ll defer to them for the details.&lt;/p&gt;

&lt;h2 id=&quot;updating-posteriors--conjugate-priors&quot;&gt;Updating Posteriors &amp;amp; Conjugate Priors&lt;/h2&gt;

&lt;p&gt;The above approach of calculating out all the probabilites by hand works reasonbly well
when there are only a few possible outcomes in the probability space, but it doesn’t
scale well to large (discrete) probability spaces, and won’t work at all in continuous
probability spaces. In such situations, you’re still fundamentally relying on Bayes
theorem, but the way it is applied looks quite different - you end up using sums and
integrals to calculate the relevant terms.&lt;/p&gt;

&lt;p&gt;Again, I’ll defer to the &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/&quot;&gt;MIT stats course readings&lt;/a&gt; for the details - readings 12
and 13 are the relevant ones here.&lt;/p&gt;

&lt;p&gt;It’s particularly useful to be familiar with the concept of &lt;strong&gt;conjugate
priors&lt;/strong&gt;. In general, updating your priors involves computing an integral,
which as anyone who has taken calculus knows can be a pain in the ass. When
sampling from a distribution and estimating the parameters, there are certain
priors for which the updates based on successive samples work out to be very
simple.&lt;/p&gt;

&lt;p&gt;For an example of this, suppose you’re flipping a biased coin and trying to
figure out the bias. This is equivalent to sampling a binomial distribution and
trying to estimate the parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. If your prior is uniform (flat across
the interval &lt;script type=&quot;math/tex&quot;&gt;[0,1]&lt;/script&gt;), then after &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; flips, &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; of which come up heads,
your posterior probability density on &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; will be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(p) \propto p^{k}((1-p)^{N-k}.&lt;/script&gt;

&lt;p&gt;This is called a &lt;strong&gt;&lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; distribution&lt;/strong&gt;. It is kind of magical that we can
calculate this without having to do any integrals - this is because the
&lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; distribution is “conjugate to” the binomial distribution. It’s
important that we started out with a uniform distribution as our prior - if we
had chosen an arbitrary prior, the algebra might not have worked out as
nicely. In particular, if we start with a non-&lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt; prior, then this trick
won’t work, because our prior will not be conjuage to the binomial distribution.&lt;/p&gt;

&lt;p&gt;The other important conjugate pair to know is that of the Gaussian
distribution; it is, in fact, conjuage to itself, so if you estimate the
parameters of a normal distribution, those estimates are themselves normal, and
updating your belief about the parameters based on new draws from the normal
distribution is as simple as doing some algebra.&lt;/p&gt;

&lt;p&gt;There are many good resources available online and in textbooks discussing
conjuage priors; &lt;a href=&quot;https://en.wikipedia.org/wiki/Conjugate_prior&quot;&gt;Wikipedia&lt;/a&gt; is a good place to start.&lt;/p&gt;

&lt;h1 id=&quot;maximum-likelihood-estimation&quot;&gt;Maximum Likelihood Estimation&lt;/h1&gt;

&lt;p&gt;We discussed before the case where you have a bunch of survey data, and want to estimate
the proportion of the population that identifies as female. Statistically speaking,
this proportion is a &lt;em&gt;parameter&lt;/em&gt; of the probability distribution over gender identity in
the that geographical region. We’ve intuitively been saying that if we see 250 out of
400 respond that they are female, then our best estimate of the proportion is 5/8. Let’s
get a little more formal about why exactly this is our best estimate.&lt;/p&gt;

&lt;p&gt;First of all, I’m going to consider a simplified world in which there are only two
genders, male and female. I do this to simplify the statistics, not because it is an
accurate model of the world. In this world, if the &lt;em&gt;true&lt;/em&gt; fraction of the population
that identifies as female is 0.6, then there is some non-zero probability that you would
draw a sample of 400 people in which 250 identify as female. We call this the
&lt;em&gt;likelihood&lt;/em&gt; of the parameter 0.6. In particular, the binomial distribution tells us
that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathcal{L}(0.6|n_\text{female}=250) =  {400 \choose 250} \,0.6^{250}\, (1-0.6)^{400-250}&lt;/script&gt;

&lt;p&gt;Of course, I could calculate this for any parameter in &lt;script type=&quot;math/tex&quot;&gt;[0,1]&lt;/script&gt;; if I were very far
from 5/8, however, then this likelihood would be very small.&lt;/p&gt;

&lt;p&gt;Now, a natural question to ask is “which parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; would give us the highest
likelihood?” That is, which parameter best fits our data? That is the
&lt;strong&gt;maximum-likelihood estimate&lt;/strong&gt; of the parameter &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. The actual calculation of that
maximum involves some calculus and a neat trick involving logarithms, but I’ll refer the
reader &lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading10b.pdf&quot;&gt;elsewhere&lt;/a&gt; for those details. It’s worth noting that the MLE is often our
intuitive “best guess” at the parameter; in this case, as you might anticipate,
&lt;script type=&quot;math/tex&quot;&gt;p=5/8&lt;/script&gt; maximizes the likelihood of seeing 250 people out of 400 identify as female.&lt;/p&gt;

&lt;p&gt;I won’t give any question here, because I honestly have not seen any in my searching
around. Even so, I think it’s an important concept to be familiar with. Maximum
likelihood estimation often provides a theoretical foundation for our intuitive
estimates of parameters, and it’s helpful to be able to justify yourself in this
framework.&lt;/p&gt;

&lt;p&gt;For example, if you’re looking at samples from an exponential distribution, and you want
to identify the parameter &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;, you might guess that since the mean of an
exponential random variable is &lt;script type=&quot;math/tex&quot;&gt;\mu= 1/\lambda&lt;/script&gt;, a good guess would be &lt;script type=&quot;math/tex&quot;&gt;\lambda
\approx 1/\overline x&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;\overline x&lt;/script&gt; is your sample mean. In fact you would be
correct, and this is the MLE for &lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;; you should be familiar with this way of
thinking about parameter estimation.&lt;/p&gt;

&lt;h1 id=&quot;experimental-design&quot;&gt;Experimental Design&lt;/h1&gt;

&lt;p&gt;Last, but certainly not least, is the large subject of experimental design. This is a
more nebulous topic, and therefore harder to familiarize yourself with quickly, than the
others we’ve discussed so far.&lt;/p&gt;

&lt;p&gt;If we have some new feature, we might have reason to think it will be good to include in
our product. For example, Facebook rolled out a “stories” feature some time ago (I
honestly couldn’t tell you what it does, but it’s some thing that sits on the top of
your newsfeed). However, before they expose this to all their users, they want to put it
out there “in the wild” and see how it performs. So, they run an experiment.&lt;/p&gt;

&lt;p&gt;Designing this experiment in a valid way is essential to getting meaningful, informative
results. An interview question at Facebook might be: &lt;strong&gt;How will you analyze if launching
stories is a good idea? What data would you look at?&lt;/strong&gt; The discussion of this question
could easily fill a full 45-minute interview session, as there are many nuances and
details to examine.&lt;/p&gt;

&lt;p&gt;One basic approach would be to randomly show the “stories” feature to some people, and
not to others, and then see how it affects their behavior. This is an A/B test. Some
questions you should be thinking about are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;What metrics will we want to track in order ot measure the effect of stories?&lt;/strong&gt; For
example, we might measure the time spent on the site, the number of clicks, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How should we randomize the two groups?&lt;/strong&gt; Should we randomly choose every time someone
visits the site whether to show them stories or not? Or should we make a choice for
each &lt;em&gt;user&lt;/em&gt; and fix that choice? Generally, user-based randomization is preferable,
although sometimes it’s hard to do across devices (think about why this is).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How long should we run the tests? How many people should be in each group?&lt;/strong&gt; This
decision is often based on a &lt;em&gt;power calculation&lt;/em&gt;, which gives us the probability of
rejecting the null hypothesis, given some alternative hypothesis. I personally am not
a huge fan of these because the alternative hypothesis is usually quite ad-hoc, but it
is the standard, so it’s good to know how to do it. For example, you might demand that
your test be large enough that if including stories increases site visit time by at
least one minute, our A/B test will detect that with 90% probability.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;When can we stop the test?&lt;/strong&gt; The important thing to note here is that you &lt;strong&gt;cannot&lt;/strong&gt;
just stop the test once the results look good - you have to decide beforehand how long
you want it to run.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How will you deal with confounding variables?&lt;/strong&gt; What if, due to some techincal
difficulty, you end up mostly showing stories to users at a certain time of day, or in
a certain geographical region? There are a variety of approaches here, and I won’t get
into the details, but it’s essential that you be able to answer this concern clearly
and thoroughly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s also worth considering scenarios where you have to analyze data after the fact in
order to perform “experiments”; sometimes you want to know (for example) if the color of
a product has affected how well it sold, and you want to do so using existing sales
data. What limitations might this impose? A key limitation is that of confounding
variables - perhaps the product in red mostly sold in certain geographic regions,
whereas the blue version sold better in other geographic regions. What impact will this
have on your analysis?&lt;/p&gt;

&lt;p&gt;There are many other considerations to think about around experimental design. I don’t
have any particular posts that I like; I’d recommend searching around Google to find
more information on the topic.&lt;/p&gt;

&lt;p&gt;If you have any friends that do statistics professionally, I’d suggest sketching our a
design for the above experiment and talking through it with them - the ability to think
through an experimental design is something that is best developed over years of
professional experience.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This guide has focused on some of the basic aspects of statistics that get covered in
data science interviews. It is far from exhaustive - different companies focus on
different skills, and will therefore be asking you about different statistical concepts
and techniques. I haven’t discussed time-dependent statistics at all - Markov chains,
time-series analysis, forecasting, and stochastic processes all might be of interest to
employers if they are relevant to the field of work.&lt;/p&gt;

&lt;p&gt;Please let me know if you have any corrections to what I’ve said here. I’m far
from a statistician, so I’m sure that I’ve made lots of small (and some large)
mistakes!&lt;/p&gt;

&lt;p&gt;Stay tuned for the rest of the study guide, which should be appearing in the
coming months. And finally, best of luck with your job search! It can be a
challenging, and even demoralizing experience; just keep learning, and don’t
let rejection get you down. Happy hunting!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;Of course, the actual statement is careful about the mode of
convergence, and the fact that it is actually an appropriately-normalized
version of the distribution that converges, and so on. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Again, we’re being loose here - it has to have finite variance, and
the convergence is only in a specific sense. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;I’m being a little loose with definitions here - the width of a
&lt;script type=&quot;math/tex&quot;&gt;2\sigma&lt;/script&gt; inverval is actually &lt;script type=&quot;math/tex&quot;&gt;4\sigma&lt;/script&gt;, but I think most would still
describe it using the phrase “two-sigma”. &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote4&quot;&gt;
      &lt;p&gt;As usual, we’re being a bit sloppy - we’re just using the sample variance in
place of the true variance and pretending this is correct. This will work if the
number of samples &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is large. If you need confidence intervals with few (say,
less than 15) samples, I recommend you look into confidence intervals based on the
student-t distribution. &lt;a href=&quot;#fnref:fnote4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:fnote4:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnotez&quot;&gt;
      &lt;p&gt;In doing bootstrapping, we’re really trying to find the distribution of our
statistic &lt;script type=&quot;math/tex&quot;&gt;\hat S&lt;/script&gt;. So, what we find via this method are bounds &lt;script type=&quot;math/tex&quot;&gt;(l,u)&lt;/script&gt; such that
&lt;script type=&quot;math/tex&quot;&gt;P(l\leq \hat S \leq u)\geq C&lt;/script&gt;. How does this relate to the definition of a
confidence interval? This is a somewhat theoretic exercise, but can be helpful in
clarifying your understanding of the more technical aspects of confidence interval
computation. &lt;a href=&quot;#fnref:fnotez&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnoted&quot;&gt;
      &lt;p&gt;Why are you using MATLAB? Stop that. You’re not in school anymore. &lt;a href=&quot;#fnref:fnoted&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnotec&quot;&gt;
      &lt;p&gt;Some of the issues that arise here (for example, over- and
under-fitting) have solutions that are more practical and less theoretical and
statistical in nature - these will be covered in more depth in the machine
learning portion of this guide, and so we don’t go into too much detail in this
section. &lt;a href=&quot;#fnref:fnotec&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnoteb&quot;&gt;
      &lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\beta_0&lt;/script&gt; just represents the difference in the mean of the two
variables, so it could be non-zero even if the two are independent. &lt;a href=&quot;#fnref:fnoteb&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">Part I of my guide to data science interviews, focusing on statistics and experimental design.</summary></entry><entry><title type="html">New Paper: Metrics For Graph Comparison</title><link href="http://localhost:4000/posts/2019/07/05/metrics-paper.html" rel="alternate" type="text/html" title="New Paper: Metrics For Graph Comparison" /><published>2019-07-05T00:00:00+05:30</published><updated>2019-07-05T00:00:00+05:30</updated><id>http://localhost:4000/posts/2019/07/05/metrics-paper</id><content type="html" xml:base="http://localhost:4000/posts/2019/07/05/metrics-paper.html">&lt;p&gt;I just put a &lt;a href=&quot;https://www.biorxiv.org/content/10.1101/611509v1&quot;&gt;new paper up on the arXiv&lt;/a&gt;, and so I thought I would share it
here. This was the final paper I wrote for my Ph.D., and it’s the one I’m most proud
of. The paper is called “Metrics for Graph Comparison: a Practitioner’s Guide.”&lt;/p&gt;

&lt;h1 id=&quot;the-basic-idea&quot;&gt;The Basic Idea&lt;/h1&gt;

&lt;p&gt;Suppose you have two graphs, or even just a single graph that is changing in time. For
example, you might have a social network between students at a school that evolves as
time passes. Below, we see the social network for a particular French elementary school,
which is evolving as the day passes. Each vertex is a person, and each edge indicates
face-to-face contact.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/research/class_graphs.png&quot; alt=&quot;Primary School Graphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One important question that we must answer is “how much did the graph change between
times &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t+1&lt;/script&gt;?” Said another way, how similar are graphs &lt;script type=&quot;math/tex&quot;&gt;G_t&lt;/script&gt; and
&lt;script type=&quot;math/tex&quot;&gt;G_{t+1}&lt;/script&gt;? The central subjects of this paper are the many methods available for
comparing graphs.&lt;/p&gt;

&lt;p&gt;We study these methods both by looking at empirical examples like the one above, as well
as by doing a large study of the statistics of comparing various random graph
models. Which graph comparison tool can best distinguish an Erdos-Renyi random graph
from a stochastic blockmodel? What about comparing a random graph with fixed degree
distribution to a preferential attachment graph? Using Monte Carlo simulation of the
graphs, we are able to answer these questions and gain insight into the behavior of our
distances when they are used on a variety of different structures and geometries.&lt;/p&gt;

&lt;p&gt;One important focus of the paper is on practicality, and so we only look at distances
that are linear or near-linear (i.e. &lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;O(n \log n)&lt;/script&gt;) in the number of
vertices in the graph.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; More computationally expensive distances may be of
theoretical interest, but for the graphs used in business, which often range upwards of
1 million vertices, they are not feasible to use.&lt;/p&gt;

&lt;h1 id=&quot;findings&quot;&gt;Findings&lt;/h1&gt;

&lt;p&gt;There is a lot of nuance in the interpretation of these comparisons - it’s not as
simplea as “method X is the best”. The results depend strongly on the geometric
structural differences you with to learn about the graph. Do you care about total
connectivity? Then just use a simple edit distance. If you care about the community
structure of a graph, then you should probably use a spectral distance.&lt;/p&gt;

&lt;p&gt;That said, we find that spectral methods (which are quite standard, and have been around
for some time) are strong performers all around. They are robust, flexible, and have the
added benefit of easy implementation - fast spectral algorithms are ubiquitous in modern
computing packages such a MATLAB, SciPy, and Julia.&lt;/p&gt;

&lt;p&gt;For example, here is a plot showing how well the different distances are able to discern
an Erdos-Renyi random graph from a stochastic blockmodel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/metric_comparison_plot.png&quot; alt=&quot;ER_SBM_Comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Higher numbers mean that the distances can more reliably discern between the two
populations. We see that the adjacency spectral distance &lt;script type=&quot;math/tex&quot;&gt;\lambda^A&lt;/script&gt; and the
normalized Laplacian spectral distance &lt;script type=&quot;math/tex&quot;&gt;\lambda^{\mathcal L}&lt;/script&gt; are most reliably able
to pick out the community structure that differentiates between these two models. This
is not surprising, as the spectra of the graph has a direct interpretation in terms of
vibrational modes, which depend critically upon community structure.&lt;/p&gt;

&lt;p&gt;If you want to know more, check out &lt;a href=&quot;https://www.biorxiv.org/content/10.1101/611509v1&quot;&gt;the full paper&lt;/a&gt;. The above result is just one of
a large collection of findings that we lay out. As I said before, the idea isn’t to come
to a single conclusion; it is to survey the landscape and to compare and contrast these
different tools.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In research, so many people spend so much time developing new methods, and I always
think to myself, “How does this compare to the standard method? Is it actually an
improvement?” This paper attempts to take stock of a number of standard and cutting-edge
methods in graph comparison, and see what works best. After spending some time doing a
theoretical analysis of a particular graph distance metric (see &lt;a href=&quot;https://arxiv.org/abs/1707.07362&quot;&gt;my previous paper&lt;/a&gt;)
I was curious to see how all the tools available compared to one another.&lt;/p&gt;

&lt;p&gt;Also, I’ve implemented many of these distances in my Python library &lt;a href=&quot;https://www.github.com/peterewills/netcomp&quot;&gt;NetComp&lt;/a&gt;, which
you can get via &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install netcomp&lt;/code&gt;. Check it out, and feel free to post issues and/or
PRs if you want to add to/modify the library.&lt;/p&gt;

&lt;p&gt;Let me know in the comments what you think! Or feel free to email me if you
have more detailed questions about graph metrics. Happy Friday!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This is paired with the assumption that the graph is sparse, so the
number of edges is &lt;script type=&quot;math/tex&quot;&gt;O(n \log n)&lt;/script&gt; &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">A brief discussion of my latest paper, which benchmarks various metrics used to compare complex networks, also known as graphs.</summary></entry><entry><title type="html">Types as Propositions</title><link href="http://localhost:4000/posts/2018/11/30/types.html" rel="alternate" type="text/html" title="Types as Propositions" /><published>2018-11-30T00:00:00+05:30</published><updated>2018-11-30T00:00:00+05:30</updated><id>http://localhost:4000/posts/2018/11/30/types</id><content type="html" xml:base="http://localhost:4000/posts/2018/11/30/types.html">&lt;p&gt;Some of the most meaningful mathematical realizations that I’ve had have been
unexpected connections between two topics; that is, realizing that two concepts
that first appeared quite distinct are in fact one and the same. In our first
linear algebra courses, we learn that manipulations of matrices is, in fact,
equivalent to solving systems of equations. In quantum mechanics, we see that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Observable&quot;&gt;physically observable quantities&lt;/a&gt; are, mathematically speaking, linear
operators (I still don’t quite grok this one). And, my personal favorite
example, we learn in functional analysis that the linear functionals in the dual
space of a Hilbert space are themselves in perfect correspondence with the
functions in the original space.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Recently, I’ve stumbled upon another such result, which has captured my
attention for a while. The result, often referred to as Curry-Howard
correspondence, is the statement that propositions in a formal logical system
are equivalent to types in the simply typed lambda calculus. Loosely, this means
that &lt;strong&gt;logical statements are equivalent to data types&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Let’s unpack that a bit; “propositions” are just statements in a logical
system.&lt;sup id=&quot;fnref:fnote15&quot;&gt;&lt;a href=&quot;#fn:fnote15&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; In mathematics, for example, one might put forward the
proposition “no even numbers are prime,” or “14 is greater than 18”. Note that
propositions need not be &lt;em&gt;true&lt;/em&gt;; in fact, some logical systems support
propositions that cannot even be determined to be true or false.&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
“Types” can be though of as types in a computing language; &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;,
and so on. We will have much more to say about types as we move forward, but for
now, hold in your mind the conventional notion of types as defined in a language
such as Java or Python (or better yet, Haskell).&lt;/p&gt;

&lt;p&gt;How on earth could these two be in correspondence? On the surface, they appear
entirely separate concepts. In this post, I’ll spend some time unpacking what
this equivalence is actually saying, using a simple example. I am far from a
full understanding of it, but as usual, I write about it in the hopes that I’ll
be forced to clarify what I &lt;em&gt;do&lt;/em&gt; understand, or even better, be corrected by
someone more knowledgable than myself.&lt;/p&gt;

&lt;p&gt;Speaking of those more knowledgable than myself, there are various resources
online that I found very helpful in understanding the correspondence:
&lt;a href=&quot;https://www.youtube.com/watch?v=IOiZatlZtGU&amp;amp;t=1176s&quot;&gt;Philip Wadler’s talk&lt;/a&gt; on the subject is a great starting point, and there
are a number of &lt;a href=&quot;http://lambda-the-ultimate.org/node/1532&quot;&gt;useful&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/2969140/what-are-the-most-interesting-equivalences-arising-from-the-curry-howard-isomorp&quot;&gt;discussions&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/2829347/a-question-about-logic-and-the-curry-howard-correspondence&quot;&gt;available&lt;/a&gt; on StackExchange and
various functional programming forums.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;I was confused by the idea of propositions as types when I first encountered it,
and after learning more, I believe that the root of my confusion lies in the
fact that types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, which we are
familiar with from programming, correspond to very trivial propositions, making
them poor examples. We’ll have to introduce something a bit fancier; a
&lt;em&gt;conditional type&lt;/em&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OddInt&lt;/code&gt; might be odd Integers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;PrimeInt&lt;/code&gt;
might be prime integers. We’ll approximate these conditional types with custom
classes in Scala. Classes and types are &lt;a href=&quot;https://stackoverflow.com/questions/5031640/what-is-the-difference-between-a-class-and-a-type-in-scala-and-java&quot;&gt;different beasts&lt;/a&gt;, of course, but
we will ignore that distinction in this post.&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let’s consider one conditional type in particular: &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt;. This type
(actually a class in this example) is defined as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too small!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BigInteger($value)&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One could then instantiate a &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// res0: BigInteger(10001)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Too&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;small!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the fundemanetal question: what proposition corresponds to this type?  In
simple scenarios like this, the corresponding proposition is that the type can
be &lt;em&gt;inhabited&lt;/em&gt;; that is, there exists a value that satisfies that type. For
example, the type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; corresponds to the claim “there exists an integer
\(i\) for which \( i &amp;gt; 10,000 \)”. Obviously, such an integer exists, and the
fact that we can instantiate this type indicates that it corresponds to a true
proposition. Alternatively, consider a type &lt;code class=&quot;highlighter-rouge&quot;&gt;WeirdInteger&lt;/code&gt;, which is an integer
satisfying &lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt; 3 &amp;amp;&amp;amp; i &amp;gt; 5&lt;/code&gt;. We can define the type well enough, but there are
no values which satisfy it; it is an uninhabitable type, and so corresponds to a
false proposition.&lt;/p&gt;

&lt;h2 id=&quot;functions-and-implication&quot;&gt;Functions and Implication&lt;/h2&gt;

&lt;p&gt;Let’s make things a little more interesting. In programming languages, there are
not only primitive types like &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;, but there are also
&lt;strong&gt;function types&lt;/strong&gt;, which are the types of functions. For example, in Scala, the
function &lt;code class=&quot;highlighter-rouge&quot;&gt;def f(x: Int) = x.toString&lt;/code&gt; has type &lt;code class=&quot;highlighter-rouge&quot;&gt;Int =&amp;gt; String&lt;/code&gt;, which is to say
it is a function that maps integers to strings.&lt;/p&gt;

&lt;p&gt;What sort of propositions would &lt;em&gt;functions&lt;/em&gt; correspond to? It turns out that
functions naturally map to &lt;em&gt;implication&lt;/em&gt;. In some ways, the correspondence here
is very natural. Consider the conditional type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt;, and the conditional
type &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;. The definition of the latter should look familiar, from
above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOWER_BOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too small!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BiggerInteger($value)&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, we can write a function that maps &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeBigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Recall that the proposition corresponding to the type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger&lt;/code&gt; is the
statement “there exists an integer greater than 10,000”, and the proposition
corresponding to &lt;code class=&quot;highlighter-rouge&quot;&gt;Bigger&lt;/code&gt; is the statement “there exists an integer greater than
20,000”; the proposition corresponding to the function type &lt;code class=&quot;highlighter-rouge&quot;&gt;BigInteger =&amp;gt;
BiggerInteger&lt;/code&gt; is then just the statement “the existence of an integer above
10,000 implies the existence of an integer above 20,000”. And note that, as it
should be for an implication, we do not care whether there actually &lt;em&gt;does&lt;/em&gt; exist
an integer above 10,000; we simply know that &lt;em&gt;if&lt;/em&gt; one exists, then its existence
implies the existence of an integer above 20,000.&lt;/p&gt;

&lt;p&gt;To be a bit more explicit, the function that we wrote above can be thought of as
a &lt;strong&gt;proof&lt;/strong&gt; of the implication; in particular, if we suppose that there exists
an \(i\) such that \(i &amp;gt; 10,000\), then clearly \(2i &amp;gt; 20,000\), and so
if we let \(j=2i\), then we have proven the existence of a \(j\) such that
\(j &amp;gt; 20,000\). This is what the theoretical computer scientists mean when
they say that “programs are proofs”.&lt;/p&gt;

&lt;p&gt;Of course, Scala is not a proof-checking language, and cannot tell during
compilation that the function &lt;code class=&quot;highlighter-rouge&quot;&gt;makeBigger&lt;/code&gt; is valid; we would need a much richer
type system to be able to validate such functions. Consider that the following
function compiles with no problem, although there are no input values for which
it will not throw a (runtime) exception:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wonky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BiggerInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BiggerInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;wait-what&quot;&gt;Wait… what?&lt;/h3&gt;

&lt;p&gt;If you think about it a bit more, it’s sort of a weird example; you
could map &lt;em&gt;any&lt;/em&gt; type to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt;, just by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;def f[A](a:A):
BiggerInteger = new BiggerInteger(20001)&lt;/code&gt;. This is because the proposition that
corresponds to &lt;code class=&quot;highlighter-rouge&quot;&gt;BiggerInteger&lt;/code&gt; is true (the type is inhabitable), and if B is
true, then A implies B for any A at all.&lt;/p&gt;

&lt;p&gt;Common languages such as Haskell only express very trivial propositions with
their types; there does exist one uninhabitable type (&lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;), but I have not
found much use for it in practice. The benefit of using conditional types for
these examples is that we can explore at least some types which have
corresponding &lt;em&gt;false&lt;/em&gt; propositions, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;WeirdInteger&lt;/code&gt;, which are integers
&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; which satisfy &lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt; 3 &amp;amp;&amp;amp; i &amp;gt; 5&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Seeing all this, you can begin to get a sense of how computer-assisted proof
techniques might arise out of it. If the fact that a program compiles is
equivalent to the truth the corrsponding proposition, then all we need is a
language with a rich enough type system to express interesting
statements. Examples of languages used in this way include &lt;a href=&quot;https://coq.inria.fr/&quot;&gt;Coq&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Agda_(programming_language&quot;&gt;Agda&lt;/a&gt;. A thorough discussion of such languages is beyond both the scope of
this post and my understanding.&lt;/p&gt;

&lt;p&gt;I think what keeps me interested in this subject is that it still remains quite
opaque to me; I’ve struggled to even come up with these simple (and flawed)
examples of how Curry-Howard correspondence plays out in practice. I hope that
anyone reading this who understand the subject better than I do will leave a
detailed list of my misunderstandings, so that I can better grasp this
mysterious and fascinating topic.&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This statement is difficult to understand without background in
functional analysis, but it is in fact one of the most beautiful examples of
such an equivalence result. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote15&quot;&gt;
      &lt;p&gt;I’m being a bit sloppy here. The type of logic we’re talking about
here is not classical logic, but rather in the sense of &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_deduction&quot;&gt;natural deduction&lt;/a&gt;. &lt;a href=&quot;#fnref:fnote15&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Such systems are called undecidable; see
&lt;a href=&quot;https://en.wikipedia.org/wiki/Decidability_(logic)&quot;&gt;the wiki entry on decidability&lt;/a&gt; for more information. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;We won’t be careful about whether the idea of conditional types
presented here corresponds well with conditional types as they are actually
implemented in programming languages such as &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/21316&quot;&gt;Typescript&lt;/a&gt;. &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">What is the connection between data types and logical propositions? Surprisingly, it runs quite deep. This post explores and illuminates that link.</summary></entry><entry><title type="html">Inverse Transform Sampling in Python</title><link href="http://localhost:4000/posts/2018/06/24/sampling.html" rel="alternate" type="text/html" title="Inverse Transform Sampling in Python" /><published>2018-06-24T00:00:00+05:30</published><updated>2018-06-24T00:00:00+05:30</updated><id>http://localhost:4000/posts/2018/06/24/sampling</id><content type="html" xml:base="http://localhost:4000/posts/2018/06/24/sampling.html">&lt;p&gt;When doing data work, we often need to sample random variables. This is easy to
do if one wishes to sample from a Gaussian, or a uniform random variable, or a
variety of other common distributions, but what if we want to sample from an
arbitrary distribution? There is no obvious way to do this within
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.stats&lt;/code&gt;. So, I build a small library, &lt;a href=&quot;https://www.github.com/peterewills/itsample&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inverse-transform-sample&lt;/code&gt;&lt;/a&gt;,
that allows for sampling from arbitrary user provided distributions. In use, it
looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# unit Gaussian, not normalized&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itsample&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# generate 1000 samples from pdf	&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is available &lt;a href=&quot;https://www.github.com/peterewills/itsample&quot;&gt;on GitHub&lt;/a&gt;. In this post, I’ll outline the theory of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse_transform_sampling&quot;&gt;inverse transform sampling&lt;/a&gt;, discuss computational details, and outline some
of the challenges faced in implementation.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-inverse-transform-sampling&quot;&gt;Introduction to Inverse Transform Sampling&lt;/h2&gt;

&lt;p&gt;Suppose we have a probability density function \(p(x)\), which has an
associated cumulative density function (CDF) \(F(x)\), defined as usual by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x) = \int_{-\infty}^x p(s)ds.&lt;/script&gt;

&lt;p&gt;Recall that the cumulative density function \(F(x)\) tells us &lt;em&gt;the probability
that a random sample from \(p\) is less than or equal to x&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a second to notice something here. If we knew, for some x, that
\(F(x)=t\), then drawing \(x\) from \(p\) is in some way &lt;strong&gt;equivalent to
drawing \(t\) from a uniform random variable on \([0,1]\)&lt;/strong&gt;, since the CDF for
a uniform random variable is \(F_u(t) = t\).&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;That realization is the basis for inverse transform sampling. The procedure is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Draw a sample \(t\) uniformly from the inverval \([0,1]\).&lt;/li&gt;
  &lt;li&gt;Solve the equation \(F(x)=t\) for \(x\) (invert the CDF).&lt;/li&gt;
  &lt;li&gt;Return the resulting \(x\) as the sample from \(p\).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;computational-considerations&quot;&gt;Computational Considerations&lt;/h2&gt;

&lt;p&gt;Most of the computational work done in the above algorithm comes in at step 2,
in which the CDF is inverted.&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Consider Newton’s method, a typical
routine for finding numerical solutions to equations: the approach is iterative,
and so the function to be inverted, in our case the CDF \(F(x)\), is evaluated
many times. Now, in our case, since \(F\) is a (numerically computed) integral
of \(p\), this means that we will have to run our numerical quadrature routine
once for each evaluation of \(F\). Since we need &lt;em&gt;many&lt;/em&gt; evaluations of \(F\)
for a single sample, this can lead to a significant slowdown in sampling.&lt;/p&gt;

&lt;p&gt;Again, the pain point here is that our CDF \(F(x)\) is slow to evaluate,
because each evaluation requires numerical quadrature. What we need is an
approximation of the CDF that is fast to evaluate, as well as accurate.&lt;/p&gt;

&lt;h3 id=&quot;chebyshev-approximation-of-the-cdf&quot;&gt;Chebyshev Approximation of the CDF&lt;/h3&gt;

&lt;p&gt;I snooped around on the internet a bit, and found &lt;a href=&quot;https://github.com/scipy/scipy/issues/3747&quot;&gt;this feature request&lt;/a&gt; for
scipy, which is related to this same issue. Although it never got off the
ground, I found an interesting link to &lt;a href=&quot;https://arxiv.org/pdf/1307.1223.pdf&quot;&gt;a 2013 paper by Olver &amp;amp; Townsend&lt;/a&gt;, in
which they suggest using Chebyshev polynomials to approximate the PDF. The
advantage of this approach is that the integral of a series of Chebyshev
polynomials is known analytically - that is, if we know the Chebyshev expansion
of the PDF, we automatically know the Chebyshev expansion of the CDF as
well. This should allow us to rapidly invert the (Chebyshev approximation of
the) CDF, and thus sample from the distribution efficiently.&lt;/p&gt;

&lt;h3 id=&quot;other-approaches&quot;&gt;Other Approaches&lt;/h3&gt;

&lt;p&gt;There are also less mathematically sophisticated approaches that immediately
present themselves. One might consider solving \(F(x)=t\) on a grid of \(t\)
values, and then building the function \(F^{-1}(x)\) by interpolation. One
could even simply transform the provided PDF into a histogram, and then use the
functionality built in to &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.stats&lt;/code&gt; for sampling from a provided histogram
(more on that later). However, due to time constraints,
&lt;code class=&quot;highlighter-rouge&quot;&gt;inverse-transform-sample&lt;/code&gt; only includes the numerical quadrature and Chebyshev
approaches.&lt;/p&gt;

&lt;h2 id=&quot;implementation-in-python&quot;&gt;Implementation in Python&lt;/h2&gt;

&lt;p&gt;The implementation of this approach is not horribly sophisticated, but in
exchange it exhibits that wonderful readability characteristic of Python
code. The complexity is the highest in the methods implementing the
Chebyshev-based approach; those without a background in numerical analysis may
wonder, for example, why the function is evaluted on &lt;a href=&quot;https://en.wikipedia.org/wiki/Chebyshev_nodes&quot;&gt;that particularly strange 
set of nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the quadrature-based approach, both the numerical quadrature and root-finding
are both done via &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; library (&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.integrate.quad&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.optimize.root&lt;/code&gt;, respectively). When using this approach, one can set the
boundaries of the PDF to be infinite, as &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.integrate.quad&lt;/code&gt; supports
improper integrals. In the &lt;a href=&quot;https://github.com/peterewills/itsample/blob/master/example.ipynb&quot;&gt;notebook of examples&lt;/a&gt;, we show that the samples
generated by this approach do, at least in the eyeball norm, conform to the
provided PDF. As we expected, this approach is slow - it takes about 7 seconds to generate
5,000 samples from a unit normal.&lt;/p&gt;

&lt;p&gt;As with the quadrature and root-finding, pre-rolled functional from &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; was
used to both compute and evaluate the Chebyshev approximants. When approximating
a PDF using Chebyshev polynomials, finite bounds must be provided. A
user-determined tolerance determines the order of the Chebyshev approximation;
however, rather than computing a true error, we simply use the size of the last
few coefficients of the Chebyshev coefficients as an approximation. Since this
approach differs from the previousl only in the way that the CDF is constructed,
we use the same function &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; for both approaches; an option
&lt;code class=&quot;highlighter-rouge&quot;&gt;chebyshev=True&lt;/code&gt; will generate a Chebyshev approximant of the CDF, rather than
using numerical quadrature.&lt;/p&gt;

&lt;p&gt;I hoped that the Chebyshev approach would improve on this by an order of
magnitude or two; however, my hopes were thwarted. The implementation of the
Chebyshev approach is faster by perhaps a factor of 2 or 3, but does not offer
the kind of improvement I had hoped for. What happened? In testing, a single
evaluation of the Chebyshev CDF was not much faster than a single evaluation of
the quadrature CDF. The advantage of the Chebyshev CDF comes when one wishes to
evaluate a long, vectorized set of inputs; in this case, the Chebyshev CDF is
orders of magnitude faster than quadrature. But &lt;code class=&quot;highlighter-rouge&quot;&gt;scipy.optimize.root&lt;/code&gt; does not
appear to take advantage of vectorization, which makes sense - in simple
iteration schemes, the value at which the next iteration occurs depends on the
outcome of the current iteration, so there is not a simple way to vectorize the
algorithm.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I suspect that the reason this feature is absent from large-scale library like
&lt;code class=&quot;highlighter-rouge&quot;&gt;scipy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;numpy&lt;/code&gt; is that it is difficult to build a sampler that is both fast
and accurate over a large enough class of PDFs. My approach sacrifices speed;
other approximation schemes may be very fast, but may not provide the accuracy
guarantees needed by some users.&lt;/p&gt;

&lt;p&gt;What we’re left with is a library that is useful for generating small numbers
(less than 100,000) of samples. It’s worth noting that in the work of Olver &amp;amp;
Townsend, they seem to be able to use the Chebyshev approach to sample orders of
magnitude faster than my impelmentation, but sadly their Matlab code is nowhere
to be found in the Matlab library &lt;a href=&quot;http://www.chebfun.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chebfun&lt;/code&gt;&lt;/a&gt;, which is the location
advertised in their work. Presumably they implemented their own root-finder, or
Chebyshev approximation scheme, or both. There’s a lot of space for improvement
here, but I simply ran out of time and energy on this one; if you feel inspired,
&lt;a href=&quot;https://github.com/peterewills/itsample#contributing&quot;&gt;fork the repo&lt;/a&gt; and submit a pull request!&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;This is only true for \(t\in [0,1]\). For \(t&amp;lt;0\),
\(F_u(t)=0\), and for \(t&amp;gt;1\), \(F_u(t)=1\). &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;The inverse of the CDF is often called the percentile point function,
or PPF. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">Explanation of, and code for, a small Python tool for sampling from arbitrary distributions.</summary></entry><entry><title type="html">Algorithmic Musical Genre Classification</title><link href="http://localhost:4000/posts/2018/06/06/genre.html" rel="alternate" type="text/html" title="Algorithmic Musical Genre Classification" /><published>2018-06-06T00:00:00+05:30</published><updated>2018-06-06T00:00:00+05:30</updated><id>http://localhost:4000/posts/2018/06/06/genre</id><content type="html" xml:base="http://localhost:4000/posts/2018/06/06/genre.html">&lt;p&gt;If you are not automatically redirected, please &lt;a href=&quot;/portfolio/genre_cls&quot;&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/portfolio/genre_cls&quot; /&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">A summary of a project of mine in which I build an algorithmic classifier that identifies the genre of a piece of music based directly on the waveform.</summary></entry><entry><title type="html">The Meaning of Entropy</title><link href="http://localhost:4000/posts/2018/02/06/entropy.html" rel="alternate" type="text/html" title="The Meaning of Entropy" /><published>2018-02-06T00:00:00+05:30</published><updated>2018-02-06T00:00:00+05:30</updated><id>http://localhost:4000/posts/2018/02/06/entropy</id><content type="html" xml:base="http://localhost:4000/posts/2018/02/06/entropy.html">&lt;p&gt;&lt;strong&gt;Entropy&lt;/strong&gt; is a word that we see a lot in various forms. It’s classical use
  comes from thermodynamics: e.g. “the entropy in the universe is always
  increasing.” With the recent boom in statistics and machine learning, the word
  has also seen a surge in use in information-theoretic contexts: e.g. “minimize
  the cross-entropy of the validation set.”&lt;/p&gt;

&lt;p&gt;It’s been an ongoing investigation for me, trying to figure out just what the
  hell this information-theoretic entropy is all about, and how it connects to
  the notion I’m familiar with from statistical mechanics. Reading through the
  wonderful book &lt;a href=&quot;https://www.amazon.com/Data-Analysis-Bayesian-Devinderjit-Sivia/dp/0198568320&quot;&gt;Data Analysis: a Bayesian Tutorial&lt;/a&gt; by D. S. Sivia, I
  found the first connection between these two notions that really clicked for
  me. I’m going to run through the basic argument here, in the hope that
  reframing it in my own words will help me understand it more thoroughly.&lt;/p&gt;

&lt;h2 id=&quot;entropy-in-thermodynamics&quot;&gt;Entropy in Thermodynamics&lt;/h2&gt;

&lt;p&gt;Let’s start with the more intuitive notion, which is that of thermodynamic
entropy. This notion, when poorly explained, can seem opaque or quixotic;
however, when viewed through the right lens, it is straightforward, and the law
of increasing entropy becomes a highly intuitive result.&lt;/p&gt;

&lt;h3 id=&quot;counting-microstates&quot;&gt;Counting Microstates&lt;/h3&gt;

&lt;p&gt;Imagine, if you will, the bedroom of a teenager. We want to talk about the
entropy of two different states: the state of being “messy” and the state of
being “clean.” We will call these &lt;strong&gt;macrostates&lt;/strong&gt;; they describe the macroscopic
(large-scale) view of the room. However, there are also many different
microstates. One can resolve these on a variety of scales, but let’s just say
they correspond to the location/position of each individual object in the
room. To review:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Macrostate&lt;/td&gt;
      &lt;td&gt;Overall Description&lt;/td&gt;
      &lt;td&gt;“Messy”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Microstate&lt;/td&gt;
      &lt;td&gt;Fine-Scale Description&lt;/td&gt;
      &lt;td&gt;“Underwear on lamp, shoes in bed, etc.”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;the-boltzmann-entropy&quot;&gt;The Boltzmann Entropy&lt;/h3&gt;

&lt;p&gt;One might notice an interesting fact: that there are many more possible
microstates that correspond to “messy” than there are microstates that
correspond to “clean.” &lt;strong&gt;This is exactly what we mean when we say that a messy
room has higher entropy.&lt;/strong&gt; In particular, the entropy of a macrostate is &lt;strong&gt;the
log of the number of microstates that correspond to that macrostate.&lt;/strong&gt; We call
this the Boltzmann entropy, and denote it by \(S_B\). If there are
\(\Omega\) possible microstates that correspond to the macrostate of being
“messy,” then we define the entropy of this state as&lt;sup id=&quot;fnref:fnote2&quot;&gt;&lt;a href=&quot;#fn:fnote2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B(\text{messy}) = \log(\Omega).&lt;/script&gt;

&lt;p&gt;This is essentiall all we need to know here.&lt;sup id=&quot;fnref:fnote1&quot;&gt;&lt;a href=&quot;#fn:fnote1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; The entropy tells us how many
different ways there are to get a certian state. A pyramid of oranges in a
supermarket has lower entropy than the oranges fallen all over the floor,
because there are many configurations of oranges that we would call “oranges all
over the floor,” but very few that we would call “a nicely organized pyramid of
oranges.”&lt;/p&gt;

&lt;p&gt;In this context, the law of increasing entropy becomes almost tautological. If
things are moving around in our bedroom at random, and we call &lt;em&gt;most&lt;/em&gt; of those
configurations “messy,” then the room will tend towards messyness rather than
cleanliness. We sometimes use the terms “order” and “disorder” to refer to
states of relatively low and high entropy, respectively.&lt;/p&gt;

&lt;h2 id=&quot;entropy-in-information-theory&quot;&gt;Entropy in Information Theory&lt;/h2&gt;

&lt;p&gt;One also frequently encounters a notion of entropy in statistics and information
theory. This is called the &lt;em&gt;Shannon entropy&lt;/em&gt;, and the motivation for this post
is my persistent puzzlement over the connection between Boltzmann’s notion of
entropy and Shannon’s. Previous to reading &lt;a href=&quot;https://www.amazon.com/Data-Analysis-Bayesian-Devinderjit-Sivia/dp/0198568320&quot;&gt;D. Sivia’s manual&lt;/a&gt;, I only knew
the definition of Shannon entropy, but his work presented such a clear
exposition of the connection to Boltzmann’s ideas that I felt compelled to share it.&lt;/p&gt;

&lt;h3 id=&quot;permutations-and-probabilities&quot;&gt;Permutations and Probabilities&lt;/h3&gt;

&lt;p&gt;We’ll work with a thought experiment.&lt;sup id=&quot;fnref:fnote3&quot;&gt;&lt;a href=&quot;#fn:fnote3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Suppose we have \(N\) subjects
we organize into \(M\) groups, with \(N\gg M\). Let \(n_i\) indicate the
number of subjects that are in the \(i^\text{th}\) group, for
\(i=1,\ldots,M\). Of course,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^M n_i = N,&lt;/script&gt;

&lt;p&gt;and if we choose a person at random the probability that they are in group
\(i\) is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_i = \frac{n_i}{N}.&lt;/script&gt;

&lt;p&gt;The &lt;strong&gt;Shannon entropy&lt;/strong&gt; of such a discrete distribution is defined as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S = -\sum_{i=1}^M p_i\log(p_i)&lt;/script&gt;

&lt;p&gt;But why? Why \(p\log(p)\)? Let’s look and see.&lt;/p&gt;

&lt;p&gt;A macrostate of this system is defined by the size of the groups \(n_i\);
equivalently, it is defined as the probability distribution. A microstate of
this system is specifying the group of each subject: the specification that
subject number \(j\) is in group \(i\) for each \(j=1,\ldots,N\). How many
microstates correspond to a given macrostate? For the first group, we can fill
it with any of the \(N\) participants, and we must choose \(n_1\) members of
the group, so the number of ways of assigning participants to this group is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{N\choose n_1} = \frac{N!}{n_1!(N-n_1)!}&lt;/script&gt;

&lt;p&gt;For the second group, there are \(N - n_1\) remaining subjects, and we must assign
\(n_2\) of them, and so on. Thus, the total number of ways of arranging the
\(N\) balls into the groups of size \(n_i\) is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega = {N\choose n_1}{N-n_1 \choose n_2}\ldots {N-n_1-\ldots-n_{M-1}\choose n_M}.&lt;/script&gt;

&lt;p&gt;This horrendous list of binomial coefficients can be simplified down to just&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Omega =  \frac{N!}{n_1!n_2!\ldots n_M!}.&lt;/script&gt;

&lt;p&gt;The Boltzmann entropy of this macrostate is then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B = \log(\Omega) = \log(N!) - \sum_{i=1}^M \log(n_i!)&lt;/script&gt;

&lt;h3 id=&quot;from-boltzmann-to-shannon&quot;&gt;From Boltzmann to Shannon&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We will now show that the Boltzmann entropy is (approimxately) a scaling of the
Shannon entropy&lt;/strong&gt;; in particular, \(S_B \approx N\,S\). Things are going to get
slightly complicated in the algebra, but hang on. If you’d prefer, you can take
my word for it, and skip to the next section.&lt;/p&gt;

&lt;p&gt;We will use the Stirling approximation \(\log(n!)\approx n\log(n)\)&lt;sup id=&quot;fnref:fnote4&quot;&gt;&lt;a href=&quot;#fn:fnote4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
to simplify:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx N\log(N) - \sum_{i=1}^M n_i\log(n_i)&lt;/script&gt;

&lt;p&gt;Since the probability \(p_i=n_i/N\), we can re-express \(S_b\) in terms of
\(p_i\) via&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx N\log(N)-N\sum_{i=1}^M p_i\log(Np_i)&lt;/script&gt;

&lt;p&gt;Since \(\sum_ip_i=1\), we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_B \approx -N\sum_{i=1}^M p_i\log(p_i) = N \, S.&lt;/script&gt;

&lt;p&gt;Phew! So, the Boltzmann entropy \(S_b\) of having \(N\) students in \(M\)
groups with sized \(n_i\) is (approximately) \(N\) times the Shannon
entropy.&lt;/p&gt;

&lt;h2 id=&quot;who-cares&quot;&gt;Who Cares?&lt;/h2&gt;

&lt;p&gt;Admittedly, this kind of theoretical revalation will probably not change the way
you deploy cross-entropy in your machine learning projects. It is primarily used
because its gradients behave well, which is important in the stochastic
gradient-descent algorithms favored by modern deep-learning
architectures. However, I personally have a strong dislike of using tools that I
don’t have both a theoretical understanding of; hopefully you now have a better
grip on the theoretical underpinnings of cross entropy, and its relationship to
statistical mechanics.&lt;/p&gt;

&lt;!-------------------------------- FOOTER ----------------------------&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnote2&quot;&gt;
      &lt;p&gt;Often a constant will be included in this definition, so that
\(S=k_B \log(\Omega)\). This constant is arbitrary, as it simply rescales
the units of our entropy, and it will only serve to get in the way of our
analysis, so we omit it. &lt;a href=&quot;#fnref:fnote2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote1&quot;&gt;
      &lt;p&gt;All we need to know for the purpose of establishing a connection
between thermodynamic and information-theoretic entropy; of course there is
much more to know, and there are many alternative ways of conceptualizing
entropy. However, none of these have ever been intuitive to me in the way
that Boltzmann’s definition of entropy is. &lt;a href=&quot;#fnref:fnote1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote3&quot;&gt;
      &lt;p&gt;We have slightly rephrased Sivia’s presentation to fit our purposes here. &lt;a href=&quot;#fnref:fnote3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnote4&quot;&gt;
      &lt;p&gt;The most commonly used form of Stirling’s approximation is the more
precise \(\log(n!)\approx n\log(n)-n\), but we use a coarser form here. &lt;a href=&quot;#fnref:fnote4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ramya Bygari</name><email>ramyabygari239@gmail.com</email></author><category term="posts" /><summary type="html">We often talk about entropy, but what does it really mean? How do its various uses relate to one another? How does the entropy of a sequence relate to the entropy of a physical state of matter?</summary></entry></feed>